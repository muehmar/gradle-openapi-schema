pojoMembers[optionalListWithNullableItemsAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function

/**
 * OptionalListWithNullableItems
 */
@JsonIgnore
public Optional<List<Optional<String>>> getOptionalListWithNullableItemsAllOf() {
  return mapList(
      optionalListWithNullableItemsAllOf,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Optional::ofNullable
  );
}

/**
 * OptionalListWithNullableItems
 */
@JsonIgnore
public List<Optional<String>> getOptionalListWithNullableItemsAllOfOr(List<Optional<String>> defaultValue) {
  return this.optionalListWithNullableItemsAllOf == null
      ? defaultValue
      : mapList(
          optionalListWithNullableItemsAllOf,
          Function.identity(),
          Optional::ofNullable,
          Function.identity(),
          Function.identity()
      );
}

@JsonProperty("optionalListWithNullableItemsAllOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
private List<String> getOptionalListWithNullableItemsAllOfJson() {
  return optionalListWithNullableItemsAllOf;
}

]


pojoMembers[optionalListWithNullableItemsAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.List
java.util.Optional

@JsonProperty("optionalListWithNullableItemsAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
List<String> getOptionalListWithNullableItemsAnyOfJson() {
  return optionalListWithNullableItemsAnyOf;
}

@JsonIgnore
Optional<List<String>> getOptionalListWithNullableItemsAnyOf() {
  return Optional.ofNullable(optionalListWithNullableItemsAnyOf);
}
]


pojoMembers[optionalListWithNullableItems]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function
javax.validation.constraints.AssertTrue
javax.validation.constraints.Pattern
javax.validation.constraints.Size

/**
 * OptionalListWithNullableItems
 */
@JsonIgnore
public Optional<List<Optional<String>>> getOptionalListWithNullableItems() {
  return mapList(
      optionalListWithNullableItems,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Optional::ofNullable
  );
}

/**
 * OptionalListWithNullableItems
 */
@JsonIgnore
public List<Optional<String>> getOptionalListWithNullableItemsOr(List<Optional<String>> defaultValue) {
  return this.optionalListWithNullableItems == null
      ? defaultValue
      : mapList(
          optionalListWithNullableItems,
          Function.identity(),
          Optional::ofNullable,
          Function.identity(),
          Function.identity()
      );
}

@Size(min = 5, max = 10)
@JsonProperty("optionalListWithNullableItems")
@JsonInclude(JsonInclude.Include.NON_NULL)
private List<@Pattern(regexp="Hello") String> getOptionalListWithNullableItemsRaw() {
  return optionalListWithNullableItems;
}

@AssertTrue(message = "optionalListWithNullableItems is required to be non-null but is null")
@JsonIgnore
private boolean isOptionalListWithNullableItemsNotNull() {
  return isOptionalListWithNullableItemsNotNull;
}

]


pojoMembers[optionalNullableListWithNullableItemsAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getOptionalNullableListWithNullableItemsAllOf() {
  return mapList(
      optionalNullableListWithNullableItemsAllOf,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isOptionalNullableListWithNullableItemsAllOfNull)
  );
}

@JsonProperty("optionalNullableListWithNullableItemsAllOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getOptionalNullableListWithNullableItemsAllOfJackson() {
  return isOptionalNullableListWithNullableItemsAllOfNull ? new JacksonNullContainer<>(optionalNullableListWithNullableItemsAllOf) : optionalNullableListWithNullableItemsAllOf;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="Hello") String> getOptionalNullableListWithNullableItemsAllOfRaw() {
  return optionalNullableListWithNullableItemsAllOf;
}

]


pojoMembers[optionalNullableListWithNullableItemsAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List

@JsonProperty("optionalNullableListWithNullableItemsAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
Object getOptionalNullableListWithNullableItemsAnyOfJson() {
  return isOptionalNullableListWithNullableItemsAnyOfNull ? new JacksonNullContainer<>(optionalNullableListWithNullableItemsAnyOf) : optionalNullableListWithNullableItemsAnyOf;
}

@JsonIgnore
Tristate<List<String>> getOptionalNullableListWithNullableItemsAnyOf() {
  return Tristate.ofNullableAndNullFlag(optionalNullableListWithNullableItemsAnyOf, isOptionalNullableListWithNullableItemsAnyOfNull);
}
]


pojoMembers[optionalNullableListWithNullableItems]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getOptionalNullableListWithNullableItems() {
  return mapList(
      optionalNullableListWithNullableItems,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isOptionalNullableListWithNullableItemsNull)
  );
}

@JsonProperty("optionalNullableListWithNullableItems")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getOptionalNullableListWithNullableItemsJackson() {
  return isOptionalNullableListWithNullableItemsNull ? new JacksonNullContainer<>(optionalNullableListWithNullableItems) : optionalNullableListWithNullableItems;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="Hello") String> getOptionalNullableListWithNullableItemsRaw() {
  return optionalNullableListWithNullableItems;
}

]


pojoMembers[optionalNullableStringValAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
javax.validation.constraints.Pattern
.
.
/**
 * OptionalNullableStringVal
 */
@JsonIgnore
public Tristate<String> getOptionalNullableStringValAllOf() {
  return Tristate.ofNullableAndNullFlag(optionalNullableStringValAllOf, isOptionalNullableStringValAllOfNull);
}

@JsonProperty("optionalNullableStringValAllOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getOptionalNullableStringValAllOfJackson() {
  return isOptionalNullableStringValAllOfNull ? new JacksonNullContainer<>(optionalNullableStringValAllOf) : optionalNullableStringValAllOf;
}

@Pattern(regexp="Hello")
@JsonIgnore
private String getOptionalNullableStringValAllOfRaw() {
  return optionalNullableStringValAllOf;
}

]


pojoMembers[optionalNullableStringValAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate

@JsonProperty("optionalNullableStringValAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
Object getOptionalNullableStringValAnyOfJson() {
  return isOptionalNullableStringValAnyOfNull ? new JacksonNullContainer<>(optionalNullableStringValAnyOf) : optionalNullableStringValAnyOf;
}

@JsonIgnore
Tristate<String> getOptionalNullableStringValAnyOf() {
  return Tristate.ofNullableAndNullFlag(optionalNullableStringValAnyOf, isOptionalNullableStringValAnyOfNull);
}
]


pojoMembers[optionalNullableStringVal]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
javax.validation.constraints.Pattern
.
.
/**
 * OptionalNullableStringVal
 */
@JsonIgnore
public Tristate<String> getOptionalNullableStringVal() {
  return Tristate.ofNullableAndNullFlag(optionalNullableStringVal, isOptionalNullableStringValNull);
}

@JsonProperty("optionalNullableStringVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getOptionalNullableStringValJackson() {
  return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
}

@Pattern(regexp="Hello")
@JsonIgnore
private String getOptionalNullableStringValRaw() {
  return optionalNullableStringVal;
}

]


pojoMembers[optionalStringValAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
.
.
/**
 * OptionalStringVal
 */
@JsonIgnore
public Optional<String> getOptionalStringValAllOf() {
  return Optional.ofNullable(optionalStringValAllOf);
}

/**
 * OptionalStringVal
 */
@JsonIgnore
public String getOptionalStringValAllOfOr(String defaultValue) {
  return this.optionalStringValAllOf == null ? defaultValue : this.optionalStringValAllOf;
}

@JsonProperty("optionalStringValAllOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
private String getOptionalStringValAllOfJson() {
  return optionalStringValAllOf;
}

]


pojoMembers[optionalStringValAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional

@JsonProperty("optionalStringValAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
String getOptionalStringValAnyOfJson() {
  return optionalStringValAnyOf;
}

@JsonIgnore
Optional<String> getOptionalStringValAnyOf() {
  return Optional.ofNullable(optionalStringValAnyOf);
}
]


pojoMembers[optionalStringVal]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
javax.validation.constraints.AssertTrue
javax.validation.constraints.Pattern
.
.
/**
 * OptionalStringVal
 */
@JsonIgnore
public Optional<String> getOptionalStringVal() {
  return Optional.ofNullable(optionalStringVal);
}

/**
 * OptionalStringVal
 */
@JsonIgnore
public String getOptionalStringValOr(String defaultValue) {
  return this.optionalStringVal == null ? defaultValue : this.optionalStringVal;
}

@Pattern(regexp="Hello")
@JsonProperty("optionalStringVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private String getOptionalStringValRaw() {
  return optionalStringVal;
}

@AssertTrue(message = "optionalStringVal is required to be non-null but is null")
@JsonIgnore
private boolean isOptionalStringValNotNull() {
  return isOptionalStringValNotNull;
}

]


pojoMembers[point.]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
.
.
/**
 * Point
 */
@JsonIgnore
public Tristate<String> getPoint_() {
  return Tristate.ofNullableAndNullFlag(point_, isPoint_Null);
}

@JsonProperty("point.")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getPoint_Jackson() {
  return isPoint_Null ? new JacksonNullContainer<>(point_) : point_;
}

@JsonIgnore
private String getPoint_Raw() {
  return point_;
}

]


pojoMembers[requiredListWithNullableItemsAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function
.
.
@JsonIgnore
public List<Optional<String>> getRequiredListWithNullableItemsAllOf() {
  return mapList(
      requiredListWithNullableItemsAllOf,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@JsonProperty("requiredListWithNullableItemsAllOf")
private List<String> getRequiredListWithNullableItemsAllOfJson() {
  return requiredListWithNullableItemsAllOf;
}

]


pojoMembers[requiredListWithNullableItemsAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.List

@JsonProperty("requiredListWithNullableItemsAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
List<String> getRequiredListWithNullableItemsAnyOfJson() {
  return requiredListWithNullableItemsAnyOf;
}

@JsonIgnore
List<String> getRequiredListWithNullableItemsAnyOf() {
  return requiredListWithNullableItemsAnyOf;
}
]


pojoMembers[requiredListWithNullableItems]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size
.
.
@JsonIgnore
public List<Optional<String>> getRequiredListWithNullableItems() {
  return mapList(
      requiredListWithNullableItems,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@NotNull
@Size(min = 5, max = 10)
@JsonProperty("requiredListWithNullableItems")
private List<@Pattern(regexp="Hello") String> getRequiredListWithNullableItemsRaw() {
  return requiredListWithNullableItems;
}

]


pojoMembers[requiredNullableListWithNullableItemsAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function

/**
 * RequiredNullableListWithNullableItems
 */
@JsonIgnore
public Optional<List<Optional<String>>> getRequiredNullableListWithNullableItemsAllOf() {
  return mapList(
      requiredNullableListWithNullableItemsAllOf,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Optional::ofNullable
  );
}

/**
 * RequiredNullableListWithNullableItems
 */
@JsonIgnore
public List<Optional<String>> getRequiredNullableListWithNullableItemsAllOfOr(List<Optional<String>> defaultValue) {
  return this.requiredNullableListWithNullableItemsAllOf == null
      ? defaultValue
      : mapList(
          requiredNullableListWithNullableItemsAllOf,
          Function.identity(),
          Optional::ofNullable,
          Function.identity(),
          Function.identity()
      );
}

@JsonProperty("requiredNullableListWithNullableItemsAllOf")
private List<String> getRequiredNullableListWithNullableItemsAllOfJson() {
  return requiredNullableListWithNullableItemsAllOf;
}

]


pojoMembers[requiredNullableListWithNullableItemsAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
java.util.List
java.util.Optional

@JsonProperty("requiredNullableListWithNullableItemsAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
Object getRequiredNullableListWithNullableItemsAnyOfJson() {
  return isRequiredNullableListWithNullableItemsAnyOfPresent ? new JacksonNullContainer<>(requiredNullableListWithNullableItemsAnyOf) : null;
}

@JsonIgnore
Optional<List<String>> getRequiredNullableListWithNullableItemsAnyOf() {
  return Optional.ofNullable(requiredNullableListWithNullableItemsAnyOf);
}
]


pojoMembers[requiredNullableListWithNullableItems]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
java.util.function.Function
javax.validation.constraints.AssertTrue
javax.validation.constraints.Pattern
javax.validation.constraints.Size

/**
 * RequiredNullableListWithNullableItems
 */
@JsonIgnore
public Optional<List<Optional<String>>> getRequiredNullableListWithNullableItems() {
  return mapList(
      requiredNullableListWithNullableItems,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Optional::ofNullable
  );
}

/**
 * RequiredNullableListWithNullableItems
 */
@JsonIgnore
public List<Optional<String>> getRequiredNullableListWithNullableItemsOr(List<Optional<String>> defaultValue) {
  return this.requiredNullableListWithNullableItems == null
      ? defaultValue
      : mapList(
          requiredNullableListWithNullableItems,
          Function.identity(),
          Optional::ofNullable,
          Function.identity(),
          Function.identity()
      );
}

@Size(min = 5, max = 10)
@JsonProperty("requiredNullableListWithNullableItems")
private List<@Pattern(regexp="Hello") String> getRequiredNullableListWithNullableItemsRaw() {
  return requiredNullableListWithNullableItems;
}

@AssertTrue(message = "requiredNullableListWithNullableItems is required but it is not present")
@JsonIgnore
private boolean isRequiredNullableListWithNullableItemsPresent() {
  return isRequiredNullableListWithNullableItemsPresent;
}

]


pojoMembers[requiredNullableStringValAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
.
.
/**
 * RequiredNullableStringVal
 */
@JsonIgnore
public Optional<String> getRequiredNullableStringValAllOf() {
  return Optional.ofNullable(requiredNullableStringValAllOf);
}

/**
 * RequiredNullableStringVal
 */
@JsonIgnore
public String getRequiredNullableStringValAllOfOr(String defaultValue) {
  return this.requiredNullableStringValAllOf == null ? defaultValue : this.requiredNullableStringValAllOf;
}

@JsonProperty("requiredNullableStringValAllOf")
private String getRequiredNullableStringValAllOfJson() {
  return requiredNullableStringValAllOf;
}

]


pojoMembers[requiredNullableStringValAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
java.util.Optional

@JsonProperty("requiredNullableStringValAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
Object getRequiredNullableStringValAnyOfJson() {
  return isRequiredNullableStringValAnyOfPresent ? new JacksonNullContainer<>(requiredNullableStringValAnyOf) : null;
}

@JsonIgnore
Optional<String> getRequiredNullableStringValAnyOf() {
  return Optional.ofNullable(requiredNullableStringValAnyOf);
}
]


pojoMembers[requiredNullableStringVal]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.Optional
javax.validation.constraints.AssertTrue
javax.validation.constraints.Pattern
.
.
/**
 * RequiredNullableStringVal
 */
@JsonIgnore
public Optional<String> getRequiredNullableStringVal() {
  return Optional.ofNullable(requiredNullableStringVal);
}

/**
 * RequiredNullableStringVal
 */
@JsonIgnore
public String getRequiredNullableStringValOr(String defaultValue) {
  return this.requiredNullableStringVal == null ? defaultValue : this.requiredNullableStringVal;
}

@Pattern(regexp="Hello")
@JsonProperty("requiredNullableStringVal")
private String getRequiredNullableStringValRaw() {
  return requiredNullableStringVal;
}

@AssertTrue(message = "requiredNullableStringVal is required but it is not present")
@JsonIgnore
private boolean isRequiredNullableStringValPresent() {
  return isRequiredNullableStringValPresent;
}

]


pojoMembers[requiredStringValAllOf]=[
.
.

/**
 * RequiredStringVal
 */
public String getRequiredStringValAllOf() {
  return requiredStringValAllOf;
}

]


pojoMembers[requiredStringValAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty

@JsonProperty("requiredStringValAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
String getRequiredStringValAnyOfJson() {
  return requiredStringValAnyOf;
}

@JsonIgnore
String getRequiredStringValAnyOf() {
  return requiredStringValAnyOf;
}
]


pojoMembers[requiredStringVal]=[
com.fasterxml.jackson.annotation.JsonProperty
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern

/**
 * RequiredStringVal
 */
@NotNull
@Pattern(regexp="Hello")
@JsonProperty("requiredStringVal")
public String getRequiredStringVal() {
  return requiredStringVal;
}

]


pojoMembers[stringListAllOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonProperty
java.util.function.Function
.
.
@JsonIgnore
public List<String> getStringListAllOf() {
  return mapList(
      stringListAllOf,
      Function.identity(),
      Function.identity(),
      Function.identity(),
      Function.identity()
  );
}

@JsonProperty("stringListAllOf")
private List<String> getStringListAllOfJson() {
  return stringListAllOf;
}

]


pojoMembers[stringListAnyOf]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
java.util.List

@JsonProperty("stringListAnyOf")
@JsonInclude(JsonInclude.Include.NON_NULL)
List<String> getStringListAnyOfJson() {
  return stringListAnyOf;
}

@JsonIgnore
List<String> getStringListAnyOf() {
  return stringListAnyOf;
}
]


pojoMembers[stringList]=[
java.util.List
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size
.
.
/**
 * List
 */
@NotNull
@Size(min = 1)
public List<@NotNull @Pattern(regexp="Hello") String> getStringList() {
  return stringList;
}

]


pojoMembers[switch]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
.
.
/**
 * Switch
 */
@JsonIgnore
public Tristate<String> getSwitch() {
  return Tristate.ofNullableAndNullFlag(switch_, isSwitchNull);
}

@JsonProperty("switch")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getSwitchJackson() {
  return isSwitchNull ? new JacksonNullContainer<>(switch_) : switch_;
}

@JsonIgnore
private String getSwitchRaw() {
  return switch_;
}

]