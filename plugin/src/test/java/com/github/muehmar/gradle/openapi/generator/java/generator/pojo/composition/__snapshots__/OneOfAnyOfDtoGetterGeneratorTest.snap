anyOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.Optional
.
.
/**
 * Returns {@link SampleObjectPojo1Dto} of the anyOf composition in case it is
 * valid against the schema SampleObjectPojo1 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo1Dto> getSampleObjectPojo1Dto() {
  return this.<Optional<SampleObjectPojo1Dto>>foldAnyOf(Optional::of, ignore -> Optional.empty()).stream().findFirst().flatMap(Function.identity());
}

/**
 * Returns {@link SampleObjectPojo2Dto} of the anyOf composition in case it is
 * valid against the schema SampleObjectPojo2 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo2Dto> getSampleObjectPojo2Dto() {
  return this.<Optional<SampleObjectPojo2Dto>>foldAnyOf(ignore -> Optional.empty(), Optional::of).stream().findFirst().flatMap(Function.identity());
}
]


anyOfPojoWithDiscriminator=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.Optional
.
.
/**
 * Returns {@link SampleObjectPojo1Dto} of the anyOf composition in case it is
 * valid against the schema SampleObjectPojo1 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo1Dto> getSampleObjectPojo1Dto() {
  return foldAnyOf(Optional::of, ignore -> Optional.empty(), Optional::empty);
}

/**
 * Returns {@link SampleObjectPojo2Dto} of the anyOf composition in case it is
 * valid against the schema SampleObjectPojo2 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo2Dto> getSampleObjectPojo2Dto() {
  return foldAnyOf(ignore -> Optional.empty(), Optional::of, Optional::empty);
}
]


oneOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.Optional

/**
 * Returns {@link SampleObjectPojo1Dto} of the oneOf composition in case it is
 * valid against the schema SampleObjectPojo1 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo1Dto> getSampleObjectPojo1Dto() {
  return foldOneOf(Optional::of, ignore -> Optional.empty(), Optional::empty);
}

/**
 * Returns {@link SampleObjectPojo2Dto} of the oneOf composition in case it is
 * valid against the schema SampleObjectPojo2 wrapped in an {@link Optional}, empty
 * otherwise.
 */
@JsonIgnore
public Optional<SampleObjectPojo2Dto> getSampleObjectPojo2Dto() {
  return foldOneOf(ignore -> Optional.empty(), Optional::of, Optional::empty);
}

]