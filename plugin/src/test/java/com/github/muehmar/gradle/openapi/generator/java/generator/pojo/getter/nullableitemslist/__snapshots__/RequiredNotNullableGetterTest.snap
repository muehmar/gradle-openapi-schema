nullableStringItem[API_TYPE]=[
com.fasterxml.jackson.annotation.JsonProperty
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size

public List<Optional<String>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@NotNull
@Size(min = 5, max = 10)
@JsonProperty("listVal")
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[API_TYPE_FRAMEWORK]=[
com.fasterxml.jackson.annotation.JsonProperty
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size

public List<Optional<String>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@NotNull
@Size(min = 5, max = 10)
@JsonProperty("listVal")
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[STANDARD]=[
com.fasterxml.jackson.annotation.JsonProperty
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size

public List<Optional<String>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@NotNull
@Size(min = 5, max = 10)
@JsonProperty("listVal")
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[STANDARD_NO_VALIDATION]=[
com.fasterxml.jackson.annotation.JsonProperty
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size

public List<Optional<String>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      Function.identity()
  );
}

@NotNull
@Size(min = 5, max = 10)
@JsonProperty("listVal")
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]