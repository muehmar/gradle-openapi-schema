allNullabilityAndNecessityVariants=[
com.github.muehmar.openapi.util.Tristate
java.util.Optional

/**
 * RequiredStringVal
 */
public NecessityAndNullabilityDto withRequiredStringVal(String requiredStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
}

/**
 * RequiredNullableStringVal
 */
public NecessityAndNullabilityDto withRequiredNullableStringVal(String requiredNullableStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, true, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
}

/**
 * RequiredNullableStringVal
 */
public NecessityAndNullabilityDto withRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal.orElse(null), requiredNullableStringVal.isPresent(), optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
}

/**
 * OptionalStringVal
 */
public NecessityAndNullabilityDto withOptionalStringVal(String optionalStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
}

/**
 * OptionalStringVal
 */
public NecessityAndNullabilityDto withOptionalStringVal(Optional<String> optionalStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal.orElse(null), isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
}

/**
 * OptionalNullableStringVal
 */
public NecessityAndNullabilityDto withOptionalNullableStringVal(String optionalNullableStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, false, additionalProperties);
}

/**
 * OptionalNullableStringVal
 */
public NecessityAndNullabilityDto withOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
  return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
}
]


illegalIdentifierPojo=[
com.github.muehmar.openapi.util.Tristate

/**
 * Switch
 */
public Illegal_IdentifierDto withSwitch(String switch_) {
  return new Illegal_IdentifierDto(switch_, false, point_, isPoint_Null, additionalProperties);
}

/**
 * Switch
 */
public Illegal_IdentifierDto withSwitch(Tristate<String> switch_) {
  return new Illegal_IdentifierDto(switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), point_, isPoint_Null, additionalProperties);
}

/**
 * Point
 */
public Illegal_IdentifierDto withPoint_(String point_) {
  return new Illegal_IdentifierDto(switch_, isSwitchNull, point_, false, additionalProperties);
}

/**
 * Point
 */
public Illegal_IdentifierDto withPoint_(Tristate<String> point_) {
  return new Illegal_IdentifierDto(switch_, isSwitchNull, point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
}
]


noAdditionalProperties=[
.
.
/**
 * stringVal
 */
public ObjectDto withStringVal(String stringVal) {
  return new ObjectDto(stringVal, birthdate);
}
]


propertyNameMatchesSubstringOfOtherProperty=[
com.github.muehmar.openapi.util.Tristate
java.util.Optional

/**
 * desc
 */
public ObjectPojo1Dto withSurname(String surname) {
  return new ObjectPojo1Dto(surname, true, name, isNameNull, additionalProperties);
}

/**
 * desc
 */
public ObjectPojo1Dto withSurname(Optional<String> surname) {
  return new ObjectPojo1Dto(surname.orElse(null), surname.isPresent(), name, isNameNull, additionalProperties);
}

/**
 * desc
 */
public ObjectPojo1Dto withName(String name) {
  return new ObjectPojo1Dto(surname, isSurnamePresent, name, false, additionalProperties);
}

/**
 * desc
 */
public ObjectPojo1Dto withName(Tristate<String> name) {
  return new ObjectPojo1Dto(surname, isSurnamePresent, name.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), name.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
}
]