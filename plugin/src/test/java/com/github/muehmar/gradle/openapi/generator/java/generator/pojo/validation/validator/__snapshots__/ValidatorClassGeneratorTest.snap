allOfPojoWithMembers=[
private class Validator {
  private boolean isColorValid() {
    return color != null;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isColorValid()
        && asSampleObjectPojo1Dto().isValid()
        && asSampleObjectPojo2Dto().isValid()
        && isAdditionalPropertiesValid();
  }
}
]


anyOfPojoWithMembers=[
private class Validator {
  private boolean isColorValid() {
    return color != null;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isColorValid()
        && getAnyOfValidCount() >= 1
        && isAdditionalPropertiesValid();
  }
}
]


emptyPojo=[
private class Validator {

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isAdditionalPropertiesValid();
  }
}
]


illegalIdentifierPojo=[
private class Validator {
  private boolean isSwitchValid() {
    return true;
  }

  private boolean isPoint_Valid() {
    return true;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isSwitchValid()
        && isPoint_Valid()
        && isAdditionalPropertiesValid();
  }
}
]


objectPojoWithMaxPropertyCountConstraint=[
private class Validator {
  private boolean isRequiredStringValValid() {
    if(requiredStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", requiredStringVal);
    }

    return false;
  }

  private boolean isRequiredNullableStringValValid() {
    if(requiredNullableStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", requiredNullableStringVal);
    }

    return isRequiredNullableStringValPresent;
  }

  private boolean isOptionalStringValValid() {
    if(optionalStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", optionalStringVal);
    }

    return isOptionalStringValNotNull;
  }

  private boolean isOptionalNullableStringValValid() {
    if(optionalNullableStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", optionalNullableStringVal);
    }

    return true;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isRequiredStringValValid()
        && isRequiredNullableStringValValid()
        && isOptionalStringValValid()
        && isOptionalNullableStringValValid()
        && getPropertyCount() <= 8
        && isAdditionalPropertiesValid();
  }
}
]


objectPojoWithMinPropertyCountConstraint=[
private class Validator {
  private boolean isRequiredStringValValid() {
    if(requiredStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", requiredStringVal);
    }

    return false;
  }

  private boolean isRequiredNullableStringValValid() {
    if(requiredNullableStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", requiredNullableStringVal);
    }

    return isRequiredNullableStringValPresent;
  }

  private boolean isOptionalStringValValid() {
    if(optionalStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", optionalStringVal);
    }

    return isOptionalStringValNotNull;
  }

  private boolean isOptionalNullableStringValValid() {
    if(optionalNullableStringVal != null) {
      return java.util.regex.Pattern.matches("Hello", optionalNullableStringVal);
    }

    return true;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isRequiredStringValValid()
        && isRequiredNullableStringValValid()
        && isOptionalStringValValid()
        && isOptionalNullableStringValValid()
        && 5 <= getPropertyCount()
        && isAdditionalPropertiesValid();
  }
}
]


objectPojoWithNotAllowedAdditionalProperties=[
private class Validator {
  private boolean isStringValValid() {
    if(stringVal != null) {
      return java.util.regex.Pattern.matches("Hello", stringVal);
    }

    return false;
  }

  private boolean isIntValValid() {
    if(intVal != null) {
      return 10 <= intVal
          && intVal <= 50;
    }

    return false;
  }

  private boolean isDoubleValValid() {
    if(doubleVal != null) {
      return 0 <= BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("12.5"))
          && BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("50.1")) < 0;
    }

    return false;
  }

  private boolean isValid() {
    return isStringValValid()
        && isIntValValid()
        && isDoubleValValid()
        && additionalProperties.isEmpty();
  }
}
]


objectPojoWithNotAnyValueTypeForAdditionalProperties=[
private class Validator {
  private boolean isStringValValid() {
    if(stringVal != null) {
      return java.util.regex.Pattern.matches("Hello", stringVal);
    }

    return false;
  }

  private boolean isIntValValid() {
    if(intVal != null) {
      return 10 <= intVal
          && intVal <= 50;
    }

    return false;
  }

  private boolean isDoubleValValid() {
    if(doubleVal != null) {
      return 0 <= BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("12.5"))
          && BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("50.1")) < 0;
    }

    return false;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(String additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isStringValValid()
        && isIntValValid()
        && isDoubleValValid()
        && isAllAdditionalPropertiesHaveCorrectType()
        && isAdditionalPropertiesValid();
  }
}
]


oneOfPojoWithDiscriminator=[
private class Validator {

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return getOneOfValidCount() == 1
        && isValidAgainstTheCorrectSchema()
        && isAdditionalPropertiesValid();
  }
}
]


oneOfPojoWithMembers=[
private class Validator {
  private boolean isColorValid() {
    return color != null;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isColorValid()
        && getOneOfValidCount() == 1
        && isAdditionalPropertiesValid();
  }
}
]


sampleObjectPojo2=[
com.github.muehmar.openapi.util.EmailValidator

private class Validator {
  private boolean isStringValValid() {
    if(stringVal != null) {
      return java.util.regex.Pattern.matches("Hello", stringVal);
    }

    return false;
  }

  private boolean isBirthdateValid() {
    return birthdate != null;
  }

  private boolean isEmailValid() {
    if(email != null) {
      return EmailValidator.isValid(email);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValid() {
    if(getAdditionalProperties() != null) {
      return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
    }

    return false;
  }

  private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
    return true;
  }

  private boolean isValid() {
    return isStringValValid()
        && isBirthdateValid()
        && isEmailValid()
        && isAdditionalPropertiesValid();
  }
}
]