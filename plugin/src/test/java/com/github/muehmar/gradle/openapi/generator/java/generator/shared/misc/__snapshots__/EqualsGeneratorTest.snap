allNecessityAndNullabilityVariants=[
java.util.Objects

@Override
public boolean equals(Object obj) {
  if (this == obj) return true;
  if (obj == null || this.getClass() != obj.getClass()) return false;
  final NecessityAndNullabilityDto other = (NecessityAndNullabilityDto) obj;
  return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
      && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
      && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
      && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
      && Objects.deepEquals(this.isOptionalStringValNotNull, other.isOptionalStringValNotNull)
      && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
      && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
      && Objects.deepEquals(this.requiredListWithNullableItems, other.requiredListWithNullableItems)
      && Objects.deepEquals(this.requiredNullableListWithNullableItems, other.requiredNullableListWithNullableItems)
      && Objects.deepEquals(this.isRequiredNullableListWithNullableItemsPresent, other.isRequiredNullableListWithNullableItemsPresent)
      && Objects.deepEquals(this.optionalListWithNullableItems, other.optionalListWithNullableItems)
      && Objects.deepEquals(this.isOptionalListWithNullableItemsNotNull, other.isOptionalListWithNullableItemsNotNull)
      && Objects.deepEquals(this.optionalNullableListWithNullableItems, other.optionalNullableListWithNullableItems)
      && Objects.deepEquals(this.isOptionalNullableListWithNullableItemsNull, other.isOptionalNullableListWithNullableItemsNull)
      && Objects.deepEquals(this.requiredMap, other.requiredMap)
      && Objects.deepEquals(this.requiredNullableMap, other.requiredNullableMap)
      && Objects.deepEquals(this.isRequiredNullableMapPresent, other.isRequiredNullableMapPresent)
      && Objects.deepEquals(this.optionalMap, other.optionalMap)
      && Objects.deepEquals(this.isOptionalMapNotNull, other.isOptionalMapNotNull)
      && Objects.deepEquals(this.optionalNullableMap, other.optionalNullableMap)
      && Objects.deepEquals(this.isOptionalNullableMapNull, other.isOptionalNullableMapNull)
      && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
}
]


arrayPojo=[
@Override
public boolean equals(Object obj) {
  if (this == obj) return true;
  if (obj == null || this.getClass() != obj.getClass()) return false;
  final PosologyDto other = (PosologyDto) obj;
  return Objects.deepEquals(this.items, other.items);
}
]


illegalIdentifierPojo=[
java.util.Objects

@Override
public boolean equals(Object obj) {
  if (this == obj) return true;
  if (obj == null || this.getClass() != obj.getClass()) return false;
  final Illegal_IdentifierDto other = (Illegal_IdentifierDto) obj;
  return Objects.deepEquals(this.switch_, other.switch_)
      && Objects.deepEquals(this.isSwitchNull, other.isSwitchNull)
      && Objects.deepEquals(this.point_, other.point_)
      && Objects.deepEquals(this.isPoint_Null, other.isPoint_Null)
      && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
}
]