allNecessityAndNullabilityVariants[NOT_NULLABLE_OPTIONAL]=[
.
.

]


allNecessityAndNullabilityVariants[NOT_NULLABLE_REQUIRED]=[
.
.

]


allNecessityAndNullabilityVariants[NULLABLE_OPTIONAL]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
javax.validation.constraints.Pattern

/**
 * OptionalNullableStringVal
 */
@JsonIgnore
public Tristate<String> getOptionalNullableStringVal() {
  return Tristate.ofNullableAndNullFlag(optionalNullableStringVal, isOptionalNullableStringValNull);
}

@JsonProperty("optionalNullableStringVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getOptionalNullableStringValJackson() {
  return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
}

@Pattern(regexp="Hello")
@JsonIgnore
private String getOptionalNullableStringValRaw() {
  return optionalNullableStringVal;
}
]


allNecessityAndNullabilityVariants[NULLABLE_REQUIRED]=[
.
.

]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.OptionalNullableGetterTest.generator_when_deprecatedAnnotation_then_correctOutputAndRefs=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
javax.validation.constraints.Pattern

/**
 * stringVal
 */
@JsonIgnore
public Tristate<String> getStringVal() {
  return Tristate.ofNullableAndNullFlag(stringVal, isStringValNull);
}

@JsonProperty("stringVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getStringValJackson() {
  return isStringValNull ? new JacksonNullContainer<>(stringVal) : stringVal;
}

/**
 * @deprecated This method is intended to be used only by frameworks for validation
 * or serialisation.
 */
@Deprecated
@Pattern(regexp="Hello")
@JsonIgnore
public String getStringValRaw() {
  return stringVal;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.OptionalNullableGetterTest.generator_when_disabledJacksonAndEnabledValidation_then_correctOutputAndRefs=[
com.github.muehmar.openapi.util.Tristate
javax.validation.constraints.Pattern

/**
 * stringVal
 */
public Tristate<String> getStringVal() {
  return Tristate.ofNullableAndNullFlag(stringVal, isStringValNull);
}

@Pattern(regexp="Hello")
private String getStringValRaw() {
  return stringVal;
}
]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.OptionalNullableGetterTest.generator_when_enabledJacksonAndDisabledValidation_then_correctOutputAndRefs=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate

/**
 * stringVal
 */
@JsonIgnore
public Tristate<String> getStringVal() {
  return Tristate.ofNullableAndNullFlag(stringVal, isStringValNull);
}

@JsonProperty("stringVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getStringValJackson() {
  return isStringValNull ? new JacksonNullContainer<>(stringVal) : stringVal;
}

]


com.github.muehmar.gradle.openapi.generator.java.generator.pojo.getter.OptionalNullableGetterTest.generator_when_optionalNullableSuffix_then_correctOutputAndRefs=[
com.github.muehmar.openapi.util.Tristate

/**
 * stringVal
 */
public Tristate<String> getStringValOptNull() {
  return Tristate.ofNullableAndNullFlag(stringVal, isStringValNull);
}

]


valueTypeOfArrayHasConstraints=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
javax.validation.constraints.Max
javax.validation.constraints.Min
javax.validation.constraints.NotNull
javax.validation.constraints.Size

/**
 * List
 */
@JsonIgnore
public Tristate<List<Integer>> getListVal() {
  return Tristate.ofNullableAndNullFlag(listVal, isListValNull);
}

@JsonProperty("listVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getListValJackson() {
  return isListValNull ? new JacksonNullContainer<>(listVal) : listVal;
}

@Size(min = 5)
@JsonIgnore
private List<@NotNull @Min(value = 5L) @Max(value = 10L) Integer> getListValRaw() {
  return listVal;
}
]