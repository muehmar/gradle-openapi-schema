arrayPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

/**
 * Doses to be taken
 */
public class PosologyDto {
  @JsonValue
  private final List<Double> items;

  @JsonCreator
  public PosologyDto(
      List<Double> items
    ) {
    this.items = items;
  }

  public static PosologyDto fromItems(List<Double> items) {
    return new PosologyDto(
        unmapList(
            items,
            Function.identity(),
            Function.identity(),
            Function.identity(),
            Function.identity()
        )
    );
  }

  public static PosologyDto empty() {
    return fromItems(Collections.emptyList());
  }

  /**
   * Doses to be taken
   */
  @NotNull
  @JsonProperty("items")
  public List<@NotNull Double> getItems() {
    return items;
  }

  /**
   * Doses to be taken
   */
  public PosologyDto withItems(List<Double> items) {
    return
      new PosologyDto(
        unmapList(
            items,
            Function.identity(),
            Function.identity(),
            Function.identity(),
            Function.identity()
        )
      );
  }

  @AssertTrue(message = "items does not contain unique items")
  private boolean hasItemsUniqueItems() {
    return new HashSet<>(items).size() == items.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isItemsValid() {
      if(items != null) {
        return hasItemsUniqueItems()
            && items.stream().allMatch(this::isItemsValueValid);
      }

      return false;
    }

    private boolean isItemsValueValid(Double itemsValue) {
      return itemsValue != null;
    }

    private boolean isValid() {
      return isItemsValid();
    }
  }

  private static <A, B, C, D, E> List<E> unmapList(
      A list,
      Function<A, B> unwrapList,
      Function<B, List<C>> unmapListType,
      Function<C, D> unwrapListItem,
      Function<D, E> unmapListItemType) {
    if (list == null) {
      return null;
    }

    final B unwrappedList = unwrapList.apply(list);

    if (unwrappedList == null) {
      return null;
    }

    final List<C> unmappedListType = unmapListType.apply(unwrappedList);

    if (unmappedListType == null) {
      return null;
    }

    return unmappedListType.stream()
        .map(i -> i != null ? unwrapListItem.apply(i) : null)
        .map(i -> i != null ? unmapListItemType.apply(i) : null)
        .collect(Collectors.toList());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PosologyDto other = (PosologyDto) obj;
    return Objects.deepEquals(this.items, other.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      items
    );
  }

  @Override
  public String toString() {
    return "PosologyDto{" +
      "items=" + items +
      "}";
  }
}
]