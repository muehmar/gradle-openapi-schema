arrayPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import javax.validation.constraints.NotNull;

/**
 * Doses to be taken
 */
public class PosologyDto {
  @JsonValue
  private final List<Double> items;

  @JsonCreator
  public PosologyDto(
      List<Double> items
    ) {
    this.items = items;
  }

  public static PosologyDto fromItems(List<Double> items) {
    return new PosologyDto(items);
  }

  public static PosologyDto empty() {
    return fromItems(Collections.emptyList());
  }

  /**
   * Doses to be taken
   */
  @NotNull
  public List<@NotNull Double> getItems() {
    return items;
  }

  /**
   * Doses to be taken
   */
  public PosologyDto withItems(List<Double> items) {
    return new PosologyDto(items);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isItemsValid() {
      if(items != null) {
        return items.stream().allMatch(this::isItemsValueValid);
      }

      return false;
    }

    private boolean isItemsValueValid(Double itemsValue) {
      return itemsValue != null;
    }

    private boolean isValid() {
      return isItemsValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PosologyDto other = (PosologyDto) obj;
    return Objects.deepEquals(this.items, other.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      items
    );
  }

  @Override
  public String toString() {
    return "PosologyDto{" +
      "items=" + items +
      "}";
  }
}
]


enumPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Gender of person
 */
public enum GenderDto {
  MALE("male", ""),
  FEMALE("female", ""),
  DIVERS("divers", ""),
  OTHER("other", "");

  private final String value;
  private final String description;

  GenderDto(String value, String description) {
    this.value = value;
    this.description = description;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  boolean isValid() {
    return true;
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator
  public static GenderDto fromValue(String value) {
    for (GenderDto e: GenderDto.values()) {
      if (e.value.equals(value)) {
        return e;
      }
    }
    final String possibleValues =
      Stream.of(values()).map(GenderDto::getValue).collect(Collectors.joining(", "));
    throw new IllegalArgumentException(
      "Unexpected value '"
        + value
        + "' for GenderDto, possible values are ["
        + possibleValues
        + "]");
  }
}
]


objectPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

@JsonDeserialize(builder = SampleObjectPojo1Dto.Builder.class)
public class SampleObjectPojo1Dto {
  private final String stringVal;
  private final Integer intVal;
  private final Double doubleVal;
  private final Map<String, Object> additionalProperties;

  public SampleObjectPojo1Dto(
      String stringVal,
      Integer intVal,
      Double doubleVal,
      Map<String, Object> additionalProperties
    ) {
    this.stringVal = stringVal;
    this.intVal = intVal;
    this.doubleVal = doubleVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * stringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getStringVal() {
    return stringVal;
  }

  /**
   * intVal
   */
  @NotNull
  @Min(value = 10L)
  @Max(value = 50L)
  public Integer getIntVal() {
    return intVal;
  }

  /**
   * doubleVal
   */
  @NotNull
  @DecimalMin(value = "12.5", inclusive = true)
  @DecimalMax(value = "50.1", inclusive = false)
  public Double getDoubleVal() {
    return doubleVal;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (stringVal != null ? 1 : 0) +
      (intVal != null ? 1 : 0) +
      (doubleVal != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * stringVal
   */
  public SampleObjectPojo1Dto withStringVal(String stringVal) {
    return new SampleObjectPojo1Dto(stringVal, intVal, doubleVal, additionalProperties);
  }

  /**
   * intVal
   */
  public SampleObjectPojo1Dto withIntVal(Integer intVal) {
    return new SampleObjectPojo1Dto(stringVal, intVal, doubleVal, additionalProperties);
  }

  /**
   * doubleVal
   */
  public SampleObjectPojo1Dto withDoubleVal(Double doubleVal) {
    return new SampleObjectPojo1Dto(stringVal, intVal, doubleVal, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isStringValValid() {
      if(stringVal != null) {
        return java.util.regex.Pattern.matches("Hello", stringVal);
      }

      return false;
    }

    private boolean isIntValValid() {
      if(intVal != null) {
        return 10L <= intVal
            && intVal <= 50L;
      }

      return false;
    }

    private boolean isDoubleValValid() {
      if(doubleVal != null) {
        return 0 <= BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("12.5"))
            && BigDecimal.valueOf(doubleVal).compareTo(new BigDecimal("50.1")) < 0;
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isStringValValid()
          && isIntValValid()
          && isDoubleValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final SampleObjectPojo1Dto other = (SampleObjectPojo1Dto) obj;
    return Objects.deepEquals(this.stringVal, other.stringVal)
        && Objects.deepEquals(this.intVal, other.intVal)
        && Objects.deepEquals(this.doubleVal, other.doubleVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      stringVal,
      intVal,
      doubleVal,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "SampleObjectPojo1Dto{" +
      "stringVal=" + "'" + stringVal + "'" + ", " +
      "intVal=" + intVal + ", " +
      "doubleVal=" + doubleVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String stringVal;
    private Integer intVal;
    private Double doubleVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * stringVal
     */
    @JsonProperty("stringVal")
    private Builder setStringVal(String stringVal) {
      this.stringVal = stringVal;
      return this;
    }

    /**
     * intVal
     */
    @JsonProperty("intVal")
    private Builder setIntVal(Integer intVal) {
      this.intVal = intVal;
      return this;
    }

    /**
     * doubleVal
     */
    @JsonProperty("doubleVal")
    private Builder setDoubleVal(Double doubleVal) {
      this.doubleVal = doubleVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public SampleObjectPojo1Dto build() {
      additionalProperties.remove("stringVal");
      additionalProperties.remove("intVal");
      additionalProperties.remove("doubleVal");

      return new SampleObjectPojo1Dto(stringVal, intVal, doubleVal, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullSampleObjectPojo1DtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 sampleObjectPojo1DtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * stringVal
       */
      public FullPropertyBuilder1 setStringVal(String stringVal) {
        return new FullPropertyBuilder1(builder.setStringVal(stringVal));
      }

    }

    public static final class FullPropertyBuilder1 {
      private final Builder builder;

      private FullPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * intVal
       */
      public FullPropertyBuilder2 setIntVal(Integer intVal) {
        return new FullPropertyBuilder2(builder.setIntVal(intVal));
      }

    }

    public static final class FullPropertyBuilder2 {
      private final Builder builder;

      private FullPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * doubleVal
       */
      public FullOptPropertyBuilder0 setDoubleVal(Double doubleVal) {
        return new FullOptPropertyBuilder0(builder.setDoubleVal(doubleVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public SampleObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * stringVal
       */
      public PropertyBuilder1 setStringVal(String stringVal) {
        return new PropertyBuilder1(builder.setStringVal(stringVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * intVal
       */
      public PropertyBuilder2 setIntVal(Integer intVal) {
        return new PropertyBuilder2(builder.setIntVal(intVal));
      }

    }

    public static final class PropertyBuilder2 {
      private final Builder builder;

      private PropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * doubleVal
       */
      public PropertyBuilder3 setDoubleVal(Double doubleVal) {
        return new PropertyBuilder3(builder.setDoubleVal(doubleVal));
      }

    }

    public static final class PropertyBuilder3 {
      private final Builder builder;

      private PropertyBuilder3(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public SampleObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public SampleObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]