allNullabilityAndNecessityVariants[optionalListWithNullableItems]=[
java.util.Optional

/**
 * OptionalListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalListWithNullableItems(List<String> optionalListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * OptionalListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalListWithNullableItems(Optional<List<String>> optionalListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems.orElse(null),
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * OptionalListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalListWithNullableItems_(List<Optional<String>> optionalListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      unwrapNullableItemsList(optionalListWithNullableItems),
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * OptionalListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalListWithNullableItems_(Optional<List<Optional<String>>> optionalListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      unwrapNullableItemsList(optionalListWithNullableItems.orElse(null)),
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[optionalNullableListWithNullableItems]=[
com.github.muehmar.openapi.util.Tristate
java.util.Optional

/**
 * OptionalNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems(List<String> optionalNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      false,
      additionalProperties
    );
}

/**
 * OptionalNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems(Tristate<List<String>> optionalNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems.onValue(val -> val).onNull(() -> null).onAbsent(() -> null),
      optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      additionalProperties
    );
}

/**
 * OptionalNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems_(List<Optional<String>> optionalNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      unwrapNullableItemsList(optionalNullableListWithNullableItems),
      false,
      additionalProperties
    );
}

/**
 * OptionalNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems_(Tristate<List<Optional<String>>> optionalNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      unwrapNullableItemsList(optionalNullableListWithNullableItems.onValue(val -> val).onNull(() -> null).onAbsent(() -> null)),
      optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[optionalNullableStringVal]=[
com.github.muehmar.openapi.util.Tristate

/**
 * OptionalNullableStringVal
 */
public NecessityAndNullabilityDto withOptionalNullableStringVal(String optionalNullableStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      false,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * OptionalNullableStringVal
 */
public NecessityAndNullabilityDto withOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null),
      optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[optionalStringVal]=[
java.util.Optional

/**
 * OptionalStringVal
 */
public NecessityAndNullabilityDto withOptionalStringVal(String optionalStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * OptionalStringVal
 */
public NecessityAndNullabilityDto withOptionalStringVal(Optional<String> optionalStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal.orElse(null),
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[requiredListWithNullableItems]=[
java.util.Optional

/**
 * RequiredListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredListWithNullableItems(List<String> requiredListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * RequiredListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredListWithNullableItems_(List<Optional<String>> requiredListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      unwrapNullableItemsList(requiredListWithNullableItems),
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[requiredNullableListWithNullableItems]=[
java.util.Optional

/**
 * RequiredNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems(List<String> requiredNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      true,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * RequiredNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems(Optional<List<String>> requiredNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems.orElse(null),
      true,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * RequiredNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems_(List<Optional<String>> requiredNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      unwrapNullableItemsList(requiredNullableListWithNullableItems),
      true,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * RequiredNullableListWithNullableItems
 */
public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems_(Optional<List<Optional<String>>> requiredNullableListWithNullableItems) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      unwrapNullableItemsList(requiredNullableListWithNullableItems.orElse(null)),
      true,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[requiredNullableStringVal]=[
java.util.Optional

/**
 * RequiredNullableStringVal
 */
public NecessityAndNullabilityDto withRequiredNullableStringVal(String requiredNullableStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      true,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}

/**
 * RequiredNullableStringVal
 */
public NecessityAndNullabilityDto withRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal.orElse(null),
      true,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


allNullabilityAndNecessityVariants[requiredStringVal]=[
.
.
/**
 * RequiredStringVal
 */
public NecessityAndNullabilityDto withRequiredStringVal(String requiredStringVal) {
  return
    new NecessityAndNullabilityDto(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
}
]


illegalIdentifierPojo=[
com.github.muehmar.openapi.util.Tristate

/**
 * Switch
 */
public Illegal_IdentifierDto withSwitch(String switch_) {
  return
    new Illegal_IdentifierDto(
      switch_,
      false,
      point_,
      isPoint_Null,
      additionalProperties
    );
}

/**
 * Switch
 */
public Illegal_IdentifierDto withSwitch(Tristate<String> switch_) {
  return
    new Illegal_IdentifierDto(
      switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null),
      switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      point_,
      isPoint_Null,
      additionalProperties
    );
}

/**
 * Point
 */
public Illegal_IdentifierDto withPoint_(String point_) {
  return
    new Illegal_IdentifierDto(
      switch_,
      isSwitchNull,
      point_,
      false,
      additionalProperties
    );
}

/**
 * Point
 */
public Illegal_IdentifierDto withPoint_(Tristate<String> point_) {
  return
    new Illegal_IdentifierDto(
      switch_,
      isSwitchNull,
      point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null),
      point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      additionalProperties
    );
}
]


noAdditionalProperties=[
.
.
/**
 * stringVal
 */
public ObjectDto withStringVal(String stringVal) {
  return
    new ObjectDto(
      stringVal,
      birthdate
    );
}
]


propertyNameMatchesSubstringOfOtherProperty=[
com.github.muehmar.openapi.util.Tristate
java.util.Optional

/**
 * desc
 */
public ObjectPojo1Dto withSurname(String surname) {
  return
    new ObjectPojo1Dto(
      surname,
      true,
      name,
      isNameNull,
      additionalProperties
    );
}

/**
 * desc
 */
public ObjectPojo1Dto withSurname(Optional<String> surname) {
  return
    new ObjectPojo1Dto(
      surname.orElse(null),
      true,
      name,
      isNameNull,
      additionalProperties
    );
}

/**
 * desc
 */
public ObjectPojo1Dto withName(String name) {
  return
    new ObjectPojo1Dto(
      surname,
      isSurnamePresent,
      name,
      false,
      additionalProperties
    );
}

/**
 * desc
 */
public ObjectPojo1Dto withName(Tristate<String> name) {
  return
    new ObjectPojo1Dto(
      surname,
      isSurnamePresent,
      name.onValue(val -> val).onNull(() -> null).onAbsent(() -> null),
      name.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false),
      additionalProperties
    );
}
]