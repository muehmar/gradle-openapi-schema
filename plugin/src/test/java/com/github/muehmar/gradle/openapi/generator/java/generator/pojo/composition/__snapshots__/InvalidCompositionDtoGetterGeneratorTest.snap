anyOfAndOneOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() != 1) {
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}

@Valid
@JsonIgnore
private Map<String, Object> getInvalidAnyOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getAnyOfValidCount() == 0) {
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


anyOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidAnyOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getAnyOfValidCount() == 0) {
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


anyOfPojoWithDiscriminator=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidAnyOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getAnyOfValidCount() == 0 || !isValidAgainstTheCorrectAnyOfSchema()) {
    if(type != null) {
      switch(type) {
        case "SampleObjectPojo1":
          dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
          return dtos;
        case "SampleObjectPojo2":
          dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
          return dtos;
      }
    }
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


oneOfPojo=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() != 1) {
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


oneOfPojoWithDiscriminator=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() != 1 || !isValidAgainstTheCorrectOneOfSchema()) {
    if(type != null) {
      switch(type) {
        case "SampleObjectPojo1":
          dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
          return dtos;
        case "SampleObjectPojo2":
          dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
          return dtos;
      }
    }
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]


oneOfPojoWithDiscriminatorAndNonStrictValidation=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() == 0 || !isValidAgainstTheCorrectOneOfSchema()) {
    if(color != null) {
      switch(color.getValue()) {
        case "yellow":
          dtos.put("Yellow", asYellowDto());
          return dtos;
        case "orange":
          dtos.put("Orange", asOrangeDto());
          return dtos;
      }
    }
    dtos.put("Yellow", asYellowDto());
    dtos.put("Orange", asOrangeDto());
  }
  return dtos;
}
]


oneOfPojoWithEnumDiscriminator=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

@Valid
@JsonIgnore
private Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() != 1 || !isValidAgainstTheCorrectOneOfSchema()) {
    if(color != null) {
      switch(color.getValue()) {
        case "yellow":
          dtos.put("Yellow", asYellowDto());
          return dtos;
        case "orange":
          dtos.put("Orange", asOrangeDto());
          return dtos;
      }
    }
    dtos.put("Yellow", asYellowDto());
    dtos.put("Orange", asOrangeDto());
  }
  return dtos;
}
]


oneOfPojoWithPublicDeprecatedValidationMethods=[
com.fasterxml.jackson.annotation.JsonIgnore
java.util.HashMap
java.util.Map
javax.validation.Valid

/**
 * @deprecated This method is intended to be used only by frameworks for validation
 * or serialisation.
 */
@Deprecated
@Valid
@JsonIgnore
public Map<String, Object> getInvalidOneOf() {
  final Map<String, Object> dtos = new HashMap<>();
  if(getOneOfValidCount() != 1) {
    dtos.put("SampleObjectPojo1", asSampleObjectPojo1Dto());
    dtos.put("SampleObjectPojo2", asSampleObjectPojo2Dto());
  }
  return dtos;
}
]