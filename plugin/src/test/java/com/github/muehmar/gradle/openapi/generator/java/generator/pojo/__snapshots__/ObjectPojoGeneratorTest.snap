allOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  /**
   * Birthdate
   */
  public LocalDate getBirthdate() {
    return birthdate;
  }

  /**
   * Username
   */
  public String getUsername() {
    return username;
  }

  @JsonIgnore
  @Valid
  public AdminDto getAdminDto() {
    return asAdminDto();
  }

  @JsonIgnore
  @Valid
  public UserDto getUserDto() {
    return asUserDto();
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Birthdate
   */
  public PersonDto withBirthdate(LocalDate birthdate) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Username
   */
  public PersonDto withUsername(String username) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && asAdminDto().isValid()
          && asUserDto().isValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      additionalProperties.remove("requiredStringVal");
      additionalProperties.remove("birthdate");
      additionalProperties.remove("username");

      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullAllOfBuilderAdmin0 fullBuilder() {
    return new BuilderStages.FullAllOfBuilderAdmin0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullAllOfBuilderAdmin0 fullPersonDtoBuilder() {
    return new BuilderStages.FullAllOfBuilderAdmin0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.AllOfBuilderAdmin0 builder() {
    return new BuilderStages.AllOfBuilderAdmin0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.AllOfBuilderAdmin0 personDtoBuilder() {
    return new BuilderStages.AllOfBuilderAdmin0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullAllOfBuilderAdmin0 {
      private final Builder builder;

      private FullAllOfBuilderAdmin0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Birthdate
       */
      public FullAllOfBuilderUser0 setBirthdate(LocalDate birthdate) {
        return new FullAllOfBuilderUser0(builder.setBirthdate(birthdate));
      }

      public FullAllOfBuilderUser setAdminDto(AdminDto dto) {
        return new FullAllOfBuilderUser(builder.setAdminDto(dto));
      }
    }

    public static final class FullAllOfBuilderUser0 {
      private final Builder builder;

      private FullAllOfBuilderUser0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Username
       */
      public FullPropertyBuilder0 setUsername(String username) {
        return new FullPropertyBuilder0(builder.setUsername(username));
      }

    }

    public static final class FullAllOfBuilderUser {
      private final Builder builder;

      private FullAllOfBuilderUser(Builder builder) {
        this.builder = builder;
      }

      public FullPropertyBuilder0 setUserDto(UserDto dto) {
        return new FullPropertyBuilder0(builder.setUserDto(dto));
      }
    }

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
        return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class AllOfBuilderAdmin0 {
      private final Builder builder;

      private AllOfBuilderAdmin0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Birthdate
       */
      public AllOfBuilderUser0 setBirthdate(LocalDate birthdate) {
        return new AllOfBuilderUser0(builder.setBirthdate(birthdate));
      }

      public AllOfBuilderUser setAdminDto(AdminDto dto) {
        return new AllOfBuilderUser(builder.setAdminDto(dto));
      }
    }

    public static final class AllOfBuilderUser0 {
      private final Builder builder;

      private AllOfBuilderUser0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Username
       */
      public PropertyBuilder0 setUsername(String username) {
        return new PropertyBuilder0(builder.setUsername(username));
      }

    }

    public static final class AllOfBuilderUser {
      private final Builder builder;

      private AllOfBuilderUser(Builder builder) {
        this.builder = builder;
      }

      public PropertyBuilder0 setUserDto(UserDto dto) {
        return new PropertyBuilder0(builder.setUserDto(dto));
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }
  }
}
]


anyOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertFalse;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  LocalDate getBirthdateJson() {
    return birthdate;
  }

  @JsonIgnore
  LocalDate getBirthdate() {
    return birthdate;
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  String getUsernameJson() {
    return username;
  }

  @JsonIgnore
  String getUsername() {
    return username;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns {@link AdminDto} of the anyOf composition in case it is valid against
   * the schema Admin wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<AdminDto> getAdminDto() {
    return this.<Optional<AdminDto>>foldAnyOf(Optional::of, ignore -> Optional.empty()).stream().findFirst().flatMap(Function.identity());
  }

  /**
   * Returns {@link UserDto} of the anyOf composition in case it is valid against the
   * schema User wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<UserDto> getUserDto() {
    return this.<Optional<UserDto>>foldAnyOf(ignore -> Optional.empty(), Optional::of).stream().findFirst().flatMap(Function.identity());
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Folds the anyOf part of this instance using the given mapping functions for the
   * DTO's. All mapping functions gets executed with its corresponding DTO as input
   * if this instance is valid against the corresponding schema and the results are
   * returned in a list. The order of the elements in the returned list is
   * deterministic: The order corresponds to the order of the mapping function
   * arguments, i.e. the result of the first mapping function will always be at the
   * first position in the list (if the function gets executed).<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * This method assumes this instance is either manually or automatically validated,
   * i.e. the JSON is valid against at least one of the anyOf schemas. If it is valid
   * against no schema, it will simply return an empty list.
   */
  public <T> List<T> foldAnyOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto) {
    final List<T> result = new ArrayList<>();
    if (isValidAgainstAdminDto()) {
      result.add(onAdminDto.apply(asAdminDto()));
    }
    if (isValidAgainstUserDto()) {
      result.add(onUserDto.apply(asUserDto()));
    }
    return result;
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  @Valid
  @JsonIgnore
  private Map<String, Object> getInvalidAnyOf() {
    final Map<String, Object> dtos = new HashMap<>();
    if(getAnyOfValidCount() == 0) {
      dtos.put("Admin", asAdminDto());
      dtos.put("User", asUserDto());
    }
    return dtos;
  }

  private boolean isValidAgainstAdminDto() {
    return asAdminDto().isValid();
  }

  private boolean isValidAgainstUserDto() {
    return asUserDto().isValid();
  }

  private int getAnyOfValidCount() {
    return
      (isValidAgainstAdminDto() ? 1 : 0) +
      (isValidAgainstUserDto() ? 1 : 0);
  }

  @AssertFalse(message = "Is not valid against one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstNoAnyOfSchema() {
    return getAnyOfValidCount() == 0;
  }

  @Valid
  @JsonIgnore
  private Object getAnyOf() {
    if (getAnyOfValidCount() == 0) {
      return null;
    }
    return foldAnyOf(dto -> dto, dto -> dto);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && getAnyOfValidCount() >= 1
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      additionalProperties.remove("requiredStringVal");
      additionalProperties.remove("birthdate");
      additionalProperties.remove("username");

      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullAnyOfBuilder0 fullBuilder() {
    return new BuilderStages.FullAnyOfBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullAnyOfBuilder0 fullPersonDtoBuilder() {
    return new BuilderStages.FullAnyOfBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.AnyOfBuilder0 builder() {
    return new BuilderStages.AnyOfBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.AnyOfBuilder0 personDtoBuilder() {
    return new BuilderStages.AnyOfBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullAnyOfBuilder0 {
      private final Builder builder;

      private FullAnyOfBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullAnyOfBuilder1 setAdminDto(AdminDto dto) {
        return new FullAnyOfBuilder1(builder.setAdminDto(dto));
      }

      public FullAnyOfBuilder1 setUserDto(UserDto dto) {
        return new FullAnyOfBuilder1(builder.setUserDto(dto));
      }

      public FullPropertyBuilder0 setAnyOfContainer(PersonAnyOfContainerDto container) {
        if (container.getAdminDto() != null) {
          builder.setAdminDto(container.getAdminDto());
        }

        if (container.getUserDto() != null) {
          builder.setUserDto(container.getUserDto());
        }
        return new FullPropertyBuilder0(builder);
      }
    }

    public static final class FullAnyOfBuilder1 {
      private final Builder builder;

      private FullAnyOfBuilder1(Builder builder) {
        this.builder = builder;
      }

      public FullAnyOfBuilder1 setAdminDto(AdminDto dto) {
        return new FullAnyOfBuilder1(builder.setAdminDto(dto));
      }

      public FullAnyOfBuilder1 setUserDto(UserDto dto) {
        return new FullAnyOfBuilder1(builder.setUserDto(dto));
      }

      /**
       * RequiredStringVal
       */
      public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
        return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
        return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class AnyOfBuilder0 {
      private final Builder builder;

      private AnyOfBuilder0(Builder builder) {
        this.builder = builder;
      }

      public AnyOfBuilder1 setAdminDto(AdminDto dto) {
        return new AnyOfBuilder1(builder.setAdminDto(dto));
      }

      public AnyOfBuilder1 setUserDto(UserDto dto) {
        return new AnyOfBuilder1(builder.setUserDto(dto));
      }

      public PropertyBuilder0 setAnyOfContainer(PersonAnyOfContainerDto container) {
        if (container.getAdminDto() != null) {
          builder.setAdminDto(container.getAdminDto());
        }

        if (container.getUserDto() != null) {
          builder.setUserDto(container.getUserDto());
        }
        return new PropertyBuilder0(builder);
      }
    }

    public static final class AnyOfBuilder1 {
      private final Builder builder;

      private AnyOfBuilder1(Builder builder) {
        this.builder = builder;
      }

      public AnyOfBuilder1 setAdminDto(AdminDto dto) {
        return new AnyOfBuilder1(builder.setAdminDto(dto));
      }

      public AnyOfBuilder1 setUserDto(UserDto dto) {
        return new AnyOfBuilder1(builder.setUserDto(dto));
      }

      /**
       * RequiredStringVal
       */
      public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }
  }
}
]


anyTypeMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, Object> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @Valid
  @JsonAnyGetter
  private Map<String, @NotNull Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<AdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> new AdditionalProperty<>(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return additionalPropertiesValue != null;
    }

    private boolean isValid() {
      return isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<Object> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


enableValidation[jakarta-2]=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.EmailValidator;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

/**
 * User of the Application
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final String lastName;
  private final String nickName;
  private final String email;
  private final Double height;
  private final Long level;
  private final boolean isLevelNotNull;
  private final String uppercase;
  private final boolean isUppercaseNotNull;
  private final Long multipleOfValue;
  private final boolean isMultipleOfValueNotNull;
  private final AnotherPojo anotherPojo;
  private final boolean isAnotherPojoNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      String lastName,
      String nickName,
      String email,
      Double height,
      Long level,
      boolean isLevelNotNull,
      String uppercase,
      boolean isUppercaseNotNull,
      Long multipleOfValue,
      boolean isMultipleOfValueNotNull,
      AnotherPojo anotherPojo,
      boolean isAnotherPojoNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.lastName = lastName;
    this.nickName = nickName;
    this.email = email;
    this.height = height;
    this.level = level;
    this.isLevelNotNull = isLevelNotNull;
    this.uppercase = uppercase;
    this.isUppercaseNotNull = isUppercaseNotNull;
    this.multipleOfValue = multipleOfValue;
    this.isMultipleOfValueNotNull = isMultipleOfValueNotNull;
    this.anotherPojo = anotherPojo;
    this.isAnotherPojoNotNull = isAnotherPojoNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * ID of this user
   */
  @NotNull
  @Max(value = 50L)
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  @NotNull
  @Size(min = 10, max = 15)
  public String getName() {
    return name;
  }

  /**
   * Lastname of this user
   */
  @NotNull
  @Size(min = 10)
  public String getLastName() {
    return lastName;
  }

  /**
   * Nickname of this user
   */
  @NotNull
  @Size(max = 50)
  public String getNickName() {
    return nickName;
  }

  /**
   * Email of this user
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Height of this user
   */
  @NotNull
  @DecimalMin(value = "120.0", inclusive = true)
  @DecimalMax(value = "199", inclusive = false)
  public Double getHeight() {
    return height;
  }

  /**
   * Level of this user
   */
  public Optional<Long> getLevel() {
    return Optional.ofNullable(level);
  }

  /**
   * Level of this user
   */
  public Long getLevelOr(Long defaultValue) {
    return this.level == null ? defaultValue : this.level;
  }

  @Min(value = 5L)
  private Long getLevelRaw() {
    return level;
  }

  @AssertTrue(message = "level is required to be non-null but is null")
  private boolean isLevelNotNull() {
    return isLevelNotNull;
  }

  /**
   * Something uppercase
   */
  public Optional<String> getUppercase() {
    return Optional.ofNullable(uppercase);
  }

  /**
   * Something uppercase
   */
  public String getUppercaseOr(String defaultValue) {
    return this.uppercase == null ? defaultValue : this.uppercase;
  }

  @Pattern(regexp="^(\\d[A-Z]*)")
  private String getUppercaseRaw() {
    return uppercase;
  }

  @AssertTrue(message = "uppercase is required to be non-null but is null")
  private boolean isUppercaseNotNull() {
    return isUppercaseNotNull;
  }

  /**
   * Multiple of value
   */
  public Optional<Long> getMultipleOfValue() {
    return Optional.ofNullable(multipleOfValue);
  }

  /**
   * Multiple of value
   */
  public Long getMultipleOfValueOr(Long defaultValue) {
    return this.multipleOfValue == null ? defaultValue : this.multipleOfValue;
  }

  private Long getMultipleOfValueRaw() {
    return multipleOfValue;
  }

  @AssertTrue(message = "multipleOfValue is required to be non-null but is null")
  private boolean isMultipleOfValueNotNull() {
    return isMultipleOfValueNotNull;
  }

  /**
   * Another Pojo
   */
  public Optional<AnotherPojo> getAnotherPojo() {
    return Optional.ofNullable(anotherPojo);
  }

  /**
   * Another Pojo
   */
  public AnotherPojo getAnotherPojoOr(AnotherPojo defaultValue) {
    return this.anotherPojo == null ? defaultValue : this.anotherPojo;
  }

  @Valid
  private AnotherPojo getAnotherPojoRaw() {
    return anotherPojo;
  }

  @AssertTrue(message = "anotherPojo is required to be non-null but is null")
  private boolean isAnotherPojoNotNull() {
    return isAnotherPojoNotNull;
  }

  @Valid
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @Min(5)
  @Max(15)
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (lastName != null ? 1 : 0) +
      (nickName != null ? 1 : 0) +
      (email != null ? 1 : 0) +
      (height != null ? 1 : 0) +
      (level != null ? 1 : 0) +
      (uppercase != null ? 1 : 0) +
      (multipleOfValue != null ? 1 : 0) +
      (anotherPojo != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Lastname of this user
   */
  public UserDto withLastName(String lastName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Nickname of this user
   */
  public UserDto withNickName(String nickName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Email of this user
   */
  public UserDto withEmail(String email) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Height of this user
   */
  public UserDto withHeight(Double height) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Long level) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Optional<Long> level) {
    return new UserDto(id, name, lastName, nickName, email, height, level.orElse(null), isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(String uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(Optional<String> uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase.orElse(null), isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Long multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Optional<Long> multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue.orElse(null), isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(AnotherPojo anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(Optional<AnotherPojo> anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo.orElse(null), isAnotherPojoNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      if(id != null) {
        return id <= 50L;
      }

      return false;
    }

    private boolean isNameValid() {
      if(name != null) {
        return 10 <= name.length()
            && name.length() <= 15;
      }

      return false;
    }

    private boolean isLastNameValid() {
      if(lastName != null) {
        return 10 <= lastName.length();
      }

      return false;
    }

    private boolean isNickNameValid() {
      if(nickName != null) {
        return nickName.length() <= 50;
      }

      return false;
    }

    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isHeightValid() {
      if(height != null) {
        return 0 <= BigDecimal.valueOf(height).compareTo(new BigDecimal("120.0"))
            && BigDecimal.valueOf(height).compareTo(new BigDecimal("199")) < 0;
      }

      return false;
    }

    private boolean isLevelValid() {
      if(level != null) {
        return 5L <= level;
      }

      return isLevelNotNull;
    }

    private boolean isUppercaseValid() {
      if(uppercase != null) {
        return java.util.regex.Pattern.matches("^(\\d[A-Z]*)", uppercase);
      }

      return isUppercaseNotNull;
    }

    private boolean isMultipleOfValueValid() {
      if(multipleOfValue != null) {
        return isMultipleOfValueMultipleOfValid();
      }

      return isMultipleOfValueNotNull;
    }

    private boolean isAnotherPojoValid() {
      if(anotherPojo != null) {
        return anotherPojo.isValid();
      }

      return isAnotherPojoNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLastNameValid()
          && isNickNameValid()
          && isEmailValid()
          && isHeightValid()
          && isLevelValid()
          && isUppercaseValid()
          && isMultipleOfValueValid()
          && isAnotherPojoValid()
          && 5 <= getPropertyCount()
          && getPropertyCount() <= 15
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "multipleOfValue is not a multiple of 5")
  private boolean isMultipleOfValueMultipleOfValid() {
    return multipleOfValue == null || multipleOfValue % 5L == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.lastName, other.lastName)
        && Objects.deepEquals(this.nickName, other.nickName)
        && Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.height, other.height)
        && Objects.deepEquals(this.level, other.level)
        && Objects.deepEquals(this.isLevelNotNull, other.isLevelNotNull)
        && Objects.deepEquals(this.uppercase, other.uppercase)
        && Objects.deepEquals(this.isUppercaseNotNull, other.isUppercaseNotNull)
        && Objects.deepEquals(this.multipleOfValue, other.multipleOfValue)
        && Objects.deepEquals(this.isMultipleOfValueNotNull, other.isMultipleOfValueNotNull)
        && Objects.deepEquals(this.anotherPojo, other.anotherPojo)
        && Objects.deepEquals(this.isAnotherPojoNotNull, other.isAnotherPojoNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      lastName,
      nickName,
      email,
      height,
      level,
      isLevelNotNull,
      uppercase,
      isUppercaseNotNull,
      multipleOfValue,
      isMultipleOfValueNotNull,
      anotherPojo,
      isAnotherPojoNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "lastName=" + "'" + lastName + "'" + ", " +
      "nickName=" + "'" + nickName + "'" + ", " +
      "email=" + "'" + email + "'" + ", " +
      "height=" + height + ", " +
      "level=" + level + ", " +
      "isLevelNotNull=" + isLevelNotNull + ", " +
      "uppercase=" + "'" + uppercase + "'" + ", " +
      "isUppercaseNotNull=" + isUppercaseNotNull + ", " +
      "multipleOfValue=" + multipleOfValue + ", " +
      "isMultipleOfValueNotNull=" + isMultipleOfValueNotNull + ", " +
      "anotherPojo=" + anotherPojo + ", " +
      "isAnotherPojoNotNull=" + isAnotherPojoNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private String lastName;
    private String nickName;
    private String email;
    private Double height;
    private Long level;
    private boolean isLevelNotNull = true;
    private String uppercase;
    private boolean isUppercaseNotNull = true;
    private Long multipleOfValue;
    private boolean isMultipleOfValueNotNull = true;
    private AnotherPojo anotherPojo;
    private boolean isAnotherPojoNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Lastname of this user
     */
    public Builder setLastName(String lastName) {
      this.lastName = lastName;
      return this;
    }

    /**
     * Nickname of this user
     */
    public Builder setNickName(String nickName) {
      this.nickName = nickName;
      return this;
    }

    /**
     * Email of this user
     */
    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Height of this user
     */
    public Builder setHeight(Double height) {
      this.height = height;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Long level) {
      this.level = level;
      this.isLevelNotNull = level != null;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Optional<Long> level) {
      this.level = level.orElse(null);
      this.isLevelNotNull = true;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(String uppercase) {
      this.uppercase = uppercase;
      this.isUppercaseNotNull = uppercase != null;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(Optional<String> uppercase) {
      this.uppercase = uppercase.orElse(null);
      this.isUppercaseNotNull = true;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Long multipleOfValue) {
      this.multipleOfValue = multipleOfValue;
      this.isMultipleOfValueNotNull = multipleOfValue != null;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Optional<Long> multipleOfValue) {
      this.multipleOfValue = multipleOfValue.orElse(null);
      this.isMultipleOfValueNotNull = true;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(AnotherPojo anotherPojo) {
      this.anotherPojo = anotherPojo;
      this.isAnotherPojoNotNull = anotherPojo != null;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(Optional<AnotherPojo> anotherPojo) {
      this.anotherPojo = anotherPojo.orElse(null);
      this.isAnotherPojoNotNull = true;
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("id");
      additionalProperties.remove("name");
      additionalProperties.remove("lastName");
      additionalProperties.remove("nickName");
      additionalProperties.remove("email");
      additionalProperties.remove("height");
      additionalProperties.remove("level");
      additionalProperties.remove("uppercase");
      additionalProperties.remove("multipleOfValue");
      additionalProperties.remove("anotherPojo");

      return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
    }
  }

}
]


enableValidation[jakarta-3]=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.EmailValidator;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import jakarta.validation.Valid;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * User of the Application
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final String lastName;
  private final String nickName;
  private final String email;
  private final Double height;
  private final Long level;
  private final boolean isLevelNotNull;
  private final String uppercase;
  private final boolean isUppercaseNotNull;
  private final Long multipleOfValue;
  private final boolean isMultipleOfValueNotNull;
  private final AnotherPojo anotherPojo;
  private final boolean isAnotherPojoNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      String lastName,
      String nickName,
      String email,
      Double height,
      Long level,
      boolean isLevelNotNull,
      String uppercase,
      boolean isUppercaseNotNull,
      Long multipleOfValue,
      boolean isMultipleOfValueNotNull,
      AnotherPojo anotherPojo,
      boolean isAnotherPojoNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.lastName = lastName;
    this.nickName = nickName;
    this.email = email;
    this.height = height;
    this.level = level;
    this.isLevelNotNull = isLevelNotNull;
    this.uppercase = uppercase;
    this.isUppercaseNotNull = isUppercaseNotNull;
    this.multipleOfValue = multipleOfValue;
    this.isMultipleOfValueNotNull = isMultipleOfValueNotNull;
    this.anotherPojo = anotherPojo;
    this.isAnotherPojoNotNull = isAnotherPojoNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * ID of this user
   */
  @NotNull
  @Max(value = 50L)
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  @NotNull
  @Size(min = 10, max = 15)
  public String getName() {
    return name;
  }

  /**
   * Lastname of this user
   */
  @NotNull
  @Size(min = 10)
  public String getLastName() {
    return lastName;
  }

  /**
   * Nickname of this user
   */
  @NotNull
  @Size(max = 50)
  public String getNickName() {
    return nickName;
  }

  /**
   * Email of this user
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Height of this user
   */
  @NotNull
  @DecimalMin(value = "120.0", inclusive = true)
  @DecimalMax(value = "199", inclusive = false)
  public Double getHeight() {
    return height;
  }

  /**
   * Level of this user
   */
  public Optional<Long> getLevel() {
    return Optional.ofNullable(level);
  }

  /**
   * Level of this user
   */
  public Long getLevelOr(Long defaultValue) {
    return this.level == null ? defaultValue : this.level;
  }

  @Min(value = 5L)
  private Long getLevelRaw() {
    return level;
  }

  @AssertTrue(message = "level is required to be non-null but is null")
  private boolean isLevelNotNull() {
    return isLevelNotNull;
  }

  /**
   * Something uppercase
   */
  public Optional<String> getUppercase() {
    return Optional.ofNullable(uppercase);
  }

  /**
   * Something uppercase
   */
  public String getUppercaseOr(String defaultValue) {
    return this.uppercase == null ? defaultValue : this.uppercase;
  }

  @Pattern(regexp="^(\\d[A-Z]*)")
  private String getUppercaseRaw() {
    return uppercase;
  }

  @AssertTrue(message = "uppercase is required to be non-null but is null")
  private boolean isUppercaseNotNull() {
    return isUppercaseNotNull;
  }

  /**
   * Multiple of value
   */
  public Optional<Long> getMultipleOfValue() {
    return Optional.ofNullable(multipleOfValue);
  }

  /**
   * Multiple of value
   */
  public Long getMultipleOfValueOr(Long defaultValue) {
    return this.multipleOfValue == null ? defaultValue : this.multipleOfValue;
  }

  private Long getMultipleOfValueRaw() {
    return multipleOfValue;
  }

  @AssertTrue(message = "multipleOfValue is required to be non-null but is null")
  private boolean isMultipleOfValueNotNull() {
    return isMultipleOfValueNotNull;
  }

  /**
   * Another Pojo
   */
  public Optional<AnotherPojo> getAnotherPojo() {
    return Optional.ofNullable(anotherPojo);
  }

  /**
   * Another Pojo
   */
  public AnotherPojo getAnotherPojoOr(AnotherPojo defaultValue) {
    return this.anotherPojo == null ? defaultValue : this.anotherPojo;
  }

  @Valid
  private AnotherPojo getAnotherPojoRaw() {
    return anotherPojo;
  }

  @AssertTrue(message = "anotherPojo is required to be non-null but is null")
  private boolean isAnotherPojoNotNull() {
    return isAnotherPojoNotNull;
  }

  @Valid
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @Min(5)
  @Max(15)
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (lastName != null ? 1 : 0) +
      (nickName != null ? 1 : 0) +
      (email != null ? 1 : 0) +
      (height != null ? 1 : 0) +
      (level != null ? 1 : 0) +
      (uppercase != null ? 1 : 0) +
      (multipleOfValue != null ? 1 : 0) +
      (anotherPojo != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Lastname of this user
   */
  public UserDto withLastName(String lastName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Nickname of this user
   */
  public UserDto withNickName(String nickName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Email of this user
   */
  public UserDto withEmail(String email) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Height of this user
   */
  public UserDto withHeight(Double height) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Long level) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Optional<Long> level) {
    return new UserDto(id, name, lastName, nickName, email, height, level.orElse(null), isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(String uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(Optional<String> uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase.orElse(null), isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Long multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Optional<Long> multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue.orElse(null), isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(AnotherPojo anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(Optional<AnotherPojo> anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo.orElse(null), isAnotherPojoNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      if(id != null) {
        return id <= 50L;
      }

      return false;
    }

    private boolean isNameValid() {
      if(name != null) {
        return 10 <= name.length()
            && name.length() <= 15;
      }

      return false;
    }

    private boolean isLastNameValid() {
      if(lastName != null) {
        return 10 <= lastName.length();
      }

      return false;
    }

    private boolean isNickNameValid() {
      if(nickName != null) {
        return nickName.length() <= 50;
      }

      return false;
    }

    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isHeightValid() {
      if(height != null) {
        return 0 <= BigDecimal.valueOf(height).compareTo(new BigDecimal("120.0"))
            && BigDecimal.valueOf(height).compareTo(new BigDecimal("199")) < 0;
      }

      return false;
    }

    private boolean isLevelValid() {
      if(level != null) {
        return 5L <= level;
      }

      return isLevelNotNull;
    }

    private boolean isUppercaseValid() {
      if(uppercase != null) {
        return java.util.regex.Pattern.matches("^(\\d[A-Z]*)", uppercase);
      }

      return isUppercaseNotNull;
    }

    private boolean isMultipleOfValueValid() {
      if(multipleOfValue != null) {
        return isMultipleOfValueMultipleOfValid();
      }

      return isMultipleOfValueNotNull;
    }

    private boolean isAnotherPojoValid() {
      if(anotherPojo != null) {
        return anotherPojo.isValid();
      }

      return isAnotherPojoNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLastNameValid()
          && isNickNameValid()
          && isEmailValid()
          && isHeightValid()
          && isLevelValid()
          && isUppercaseValid()
          && isMultipleOfValueValid()
          && isAnotherPojoValid()
          && 5 <= getPropertyCount()
          && getPropertyCount() <= 15
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "multipleOfValue is not a multiple of 5")
  private boolean isMultipleOfValueMultipleOfValid() {
    return multipleOfValue == null || multipleOfValue % 5L == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.lastName, other.lastName)
        && Objects.deepEquals(this.nickName, other.nickName)
        && Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.height, other.height)
        && Objects.deepEquals(this.level, other.level)
        && Objects.deepEquals(this.isLevelNotNull, other.isLevelNotNull)
        && Objects.deepEquals(this.uppercase, other.uppercase)
        && Objects.deepEquals(this.isUppercaseNotNull, other.isUppercaseNotNull)
        && Objects.deepEquals(this.multipleOfValue, other.multipleOfValue)
        && Objects.deepEquals(this.isMultipleOfValueNotNull, other.isMultipleOfValueNotNull)
        && Objects.deepEquals(this.anotherPojo, other.anotherPojo)
        && Objects.deepEquals(this.isAnotherPojoNotNull, other.isAnotherPojoNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      lastName,
      nickName,
      email,
      height,
      level,
      isLevelNotNull,
      uppercase,
      isUppercaseNotNull,
      multipleOfValue,
      isMultipleOfValueNotNull,
      anotherPojo,
      isAnotherPojoNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "lastName=" + "'" + lastName + "'" + ", " +
      "nickName=" + "'" + nickName + "'" + ", " +
      "email=" + "'" + email + "'" + ", " +
      "height=" + height + ", " +
      "level=" + level + ", " +
      "isLevelNotNull=" + isLevelNotNull + ", " +
      "uppercase=" + "'" + uppercase + "'" + ", " +
      "isUppercaseNotNull=" + isUppercaseNotNull + ", " +
      "multipleOfValue=" + multipleOfValue + ", " +
      "isMultipleOfValueNotNull=" + isMultipleOfValueNotNull + ", " +
      "anotherPojo=" + anotherPojo + ", " +
      "isAnotherPojoNotNull=" + isAnotherPojoNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private String lastName;
    private String nickName;
    private String email;
    private Double height;
    private Long level;
    private boolean isLevelNotNull = true;
    private String uppercase;
    private boolean isUppercaseNotNull = true;
    private Long multipleOfValue;
    private boolean isMultipleOfValueNotNull = true;
    private AnotherPojo anotherPojo;
    private boolean isAnotherPojoNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Lastname of this user
     */
    public Builder setLastName(String lastName) {
      this.lastName = lastName;
      return this;
    }

    /**
     * Nickname of this user
     */
    public Builder setNickName(String nickName) {
      this.nickName = nickName;
      return this;
    }

    /**
     * Email of this user
     */
    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Height of this user
     */
    public Builder setHeight(Double height) {
      this.height = height;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Long level) {
      this.level = level;
      this.isLevelNotNull = level != null;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Optional<Long> level) {
      this.level = level.orElse(null);
      this.isLevelNotNull = true;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(String uppercase) {
      this.uppercase = uppercase;
      this.isUppercaseNotNull = uppercase != null;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(Optional<String> uppercase) {
      this.uppercase = uppercase.orElse(null);
      this.isUppercaseNotNull = true;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Long multipleOfValue) {
      this.multipleOfValue = multipleOfValue;
      this.isMultipleOfValueNotNull = multipleOfValue != null;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Optional<Long> multipleOfValue) {
      this.multipleOfValue = multipleOfValue.orElse(null);
      this.isMultipleOfValueNotNull = true;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(AnotherPojo anotherPojo) {
      this.anotherPojo = anotherPojo;
      this.isAnotherPojoNotNull = anotherPojo != null;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(Optional<AnotherPojo> anotherPojo) {
      this.anotherPojo = anotherPojo.orElse(null);
      this.isAnotherPojoNotNull = true;
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("id");
      additionalProperties.remove("name");
      additionalProperties.remove("lastName");
      additionalProperties.remove("nickName");
      additionalProperties.remove("email");
      additionalProperties.remove("height");
      additionalProperties.remove("level");
      additionalProperties.remove("uppercase");
      additionalProperties.remove("multipleOfValue");
      additionalProperties.remove("anotherPojo");

      return new UserDto(id, name, lastName, nickName, email, height, level, isLevelNotNull, uppercase, isUppercaseNotNull, multipleOfValue, isMultipleOfValueNotNull, anotherPojo, isAnotherPojoNotNull, additionalProperties);
    }
  }

}
]


enabledStagedBuilder=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final boolean isLanguageNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      boolean isLanguageNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.isLanguageNotNull = isLanguageNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), isLanguageNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return isLanguageNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.isLanguageNotNull, other.isLanguageNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      isLanguageNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "isLanguageNotNull=" + isLanguageNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static final class Builder {

    private Builder() {
    }

    private Long id;
    private String name;
    private LanguageEnum language;
    private boolean isLanguageNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    private Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    private Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      this.isLanguageNotNull = language != null;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      this.isLanguageNotNull = true;
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("id");
      additionalProperties.remove("name");
      additionalProperties.remove("language");

      return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullUserDtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 userDtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * ID of this user
       */
      public FullPropertyBuilder1 setId(Long id) {
        return new FullPropertyBuilder1(builder.setId(id));
      }

    }

    public static final class FullPropertyBuilder1 {
      private final Builder builder;

      private FullPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Name of this user
       */
      public FullOptPropertyBuilder0 setName(String name) {
        return new FullOptPropertyBuilder0(builder.setName(name));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Preferred language of this user
       */
      public FullOptPropertyBuilder1 setLanguage(LanguageEnum language) {
        return new FullOptPropertyBuilder1(builder.setLanguage(language));
      }

      /**
       * Preferred language of this user
       */
      public FullOptPropertyBuilder1 setLanguage(Optional<LanguageEnum> language) {
        return new FullOptPropertyBuilder1(builder.setLanguage(language));
      }

    }

    public static final class FullOptPropertyBuilder1 {
      private final Builder builder;

      private FullOptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder1 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
      }

      public UserDto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * ID of this user
       */
      public PropertyBuilder1 setId(Long id) {
        return new PropertyBuilder1(builder.setId(id));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Name of this user
       */
      public PropertyBuilder2 setName(String name) {
        return new PropertyBuilder2(builder.setName(name));
      }

    }

    public static final class PropertyBuilder2 {
      private final Builder builder;

      private PropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public UserDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Preferred language of this user
       */
      public OptPropertyBuilder1 setLanguage(LanguageEnum language) {
        return new OptPropertyBuilder1(builder.setLanguage(language));
      }

      /**
       * Preferred language of this user
       */
      public OptPropertyBuilder1 setLanguage(Optional<LanguageEnum> language) {
        return new OptPropertyBuilder1(builder.setLanguage(language));
      }

    }

    public static final class OptPropertyBuilder1 {
      private final Builder builder;

      private OptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder1 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
      }

      public UserDto build(){
        return builder.build();
      }
    }
  }
}
]


illegalIdentifierPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;

@JsonDeserialize(builder = Illegal_IdentifierDto.Builder.class)
public class Illegal_IdentifierDto {
  private final String switch_;
  private final boolean isSwitchNull;
  private final String point_;
  private final boolean isPoint_Null;
  private final Map<String, Object> additionalProperties;

  public Illegal_IdentifierDto(
      String switch_,
      boolean isSwitchNull,
      String point_,
      boolean isPoint_Null,
      Map<String, Object> additionalProperties
    ) {
    this.switch_ = switch_;
    this.isSwitchNull = isSwitchNull;
    this.point_ = point_;
    this.isPoint_Null = isPoint_Null;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Switch
   */
  @JsonIgnore
  public Tristate<String> getSwitch() {
    return Tristate.ofNullableAndNullFlag(switch_, isSwitchNull);
  }

  @JsonProperty("switch")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getSwitchJackson() {
    return isSwitchNull ? new JacksonNullContainer<>(switch_) : switch_;
  }

  @JsonIgnore
  private String getSwitchRaw() {
    return switch_;
  }

  /**
   * Point
   */
  @JsonIgnore
  public Tristate<String> getPoint_() {
    return Tristate.ofNullableAndNullFlag(point_, isPoint_Null);
  }

  @JsonProperty("point.")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getPoint_Jackson() {
    return isPoint_Null ? new JacksonNullContainer<>(point_) : point_;
  }

  @JsonIgnore
  private String getPoint_Raw() {
    return point_;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      ((isSwitchNull || switch_ != null) ? 1 : 0) +
      ((isPoint_Null || point_ != null) ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Switch
   */
  public Illegal_IdentifierDto withSwitch(String switch_) {
    return new Illegal_IdentifierDto(switch_, false, point_, isPoint_Null, additionalProperties);
  }

  /**
   * Switch
   */
  public Illegal_IdentifierDto withSwitch(Tristate<String> switch_) {
    return new Illegal_IdentifierDto(switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), point_, isPoint_Null, additionalProperties);
  }

  /**
   * Point
   */
  public Illegal_IdentifierDto withPoint_(String point_) {
    return new Illegal_IdentifierDto(switch_, isSwitchNull, point_, false, additionalProperties);
  }

  /**
   * Point
   */
  public Illegal_IdentifierDto withPoint_(Tristate<String> point_) {
    return new Illegal_IdentifierDto(switch_, isSwitchNull, point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isSwitchValid() {
      return true;
    }

    private boolean isPoint_Valid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isSwitchValid()
          && isPoint_Valid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final Illegal_IdentifierDto other = (Illegal_IdentifierDto) obj;
    return Objects.deepEquals(this.switch_, other.switch_)
        && Objects.deepEquals(this.isSwitchNull, other.isSwitchNull)
        && Objects.deepEquals(this.point_, other.point_)
        && Objects.deepEquals(this.isPoint_Null, other.isPoint_Null)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      switch_,
      isSwitchNull,
      point_,
      isPoint_Null,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "Illegal_IdentifierDto{" +
      "switch=" + "'" + switch_ + "'" + ", " +
      "isSwitchNull=" + isSwitchNull + ", " +
      "point.=" + "'" + point_ + "'" + ", " +
      "isPoint.Null=" + isPoint_Null + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String switch_;
    private boolean isSwitchNull = false;
    private String point_;
    private boolean isPoint_Null = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Switch
     */
    @JsonProperty("switch")
    public Builder setSwitch(String switch_) {
      this.switch_ = switch_;
      this.isSwitchNull = switch_ == null;
      return this;
    }

    /**
     * Switch
     */
    @JsonIgnore
    public Builder setSwitch(Tristate<String> switch_) {
      this.switch_ = switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isSwitchNull = switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    /**
     * Point
     */
    @JsonProperty("point.")
    public Builder setPoint_(String point_) {
      this.point_ = point_;
      this.isPoint_Null = point_ == null;
      return this;
    }

    /**
     * Point
     */
    @JsonIgnore
    public Builder setPoint_(Tristate<String> point_) {
      this.point_ = point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isPoint_Null = point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public Illegal_IdentifierDto build() {
      additionalProperties.remove("switch");
      additionalProperties.remove("point.");

      return new Illegal_IdentifierDto(switch_, isSwitchNull, point_, isPoint_Null, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullIllegal_IdentifierDtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 illegal_IdentifierDtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Switch
       */
      public FullOptPropertyBuilder1 setSwitch(String switch_) {
        return new FullOptPropertyBuilder1(builder.setSwitch(switch_));
      }

      /**
       * Switch
       */
      public FullOptPropertyBuilder1 setSwitch(Tristate<String> switch_) {
        return new FullOptPropertyBuilder1(builder.setSwitch(switch_));
      }

    }

    public static final class FullOptPropertyBuilder1 {
      private final Builder builder;

      private FullOptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Point
       */
      public FullOptPropertyBuilder2 setPoint_(String point_) {
        return new FullOptPropertyBuilder2(builder.setPoint_(point_));
      }

      /**
       * Point
       */
      public FullOptPropertyBuilder2 setPoint_(Tristate<String> point_) {
        return new FullOptPropertyBuilder2(builder.setPoint_(point_));
      }

    }

    public static final class FullOptPropertyBuilder2 {
      private final Builder builder;

      private FullOptPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder2(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder2 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder2(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
      }

      public Illegal_IdentifierDto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public Illegal_IdentifierDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Switch
       */
      public OptPropertyBuilder1 setSwitch(String switch_) {
        return new OptPropertyBuilder1(builder.setSwitch(switch_));
      }

      /**
       * Switch
       */
      public OptPropertyBuilder1 setSwitch(Tristate<String> switch_) {
        return new OptPropertyBuilder1(builder.setSwitch(switch_));
      }

    }

    public static final class OptPropertyBuilder1 {
      private final Builder builder;

      private OptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Point
       */
      public OptPropertyBuilder2 setPoint_(String point_) {
        return new OptPropertyBuilder2(builder.setPoint_(point_));
      }

      /**
       * Point
       */
      public OptPropertyBuilder2 setPoint_(Tristate<String> point_) {
        return new OptPropertyBuilder2(builder.setPoint_(point_));
      }

    }

    public static final class OptPropertyBuilder2 {
      private final Builder builder;

      private OptPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder2(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder2 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder2(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
      }

      public Illegal_IdentifierDto build(){
        return builder.build();
      }
    }
  }
}
]


inlinedEnumMapObject=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Additional property enum
   */
  public enum ColorEnum {
    GREEN("green", ""),
    YELLOW("yellow", ""),
    RED("red", "");

    private final String value;
    private final String description;

    ColorEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static ColorEnum fromValue(String value) {
      for (ColorEnum e: ColorEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(ColorEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for ColorEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  public static ObjectPojo1Dto fromProperties(Map<String, ColorEnum> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @Valid
  @JsonAnyGetter
  private Map<String, @NotNull ColorEnum> getAdditionalProperties_() {
    final Map<String, ColorEnum> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> {
          if (value == null) {
            props.put(key, null);
          } else {
            castAdditionalProperty(value).ifPresent(val -> props.put(key, val));
          }
        });
    return props;
  }

  @JsonIgnore
  public List<AdditionalProperty<ColorEnum>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .flatMap(
            entry -> 
                castAdditionalProperty(entry.getValue())
                    .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                    .map(Stream::of)
                    .orElseGet(Stream::empty))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<ColorEnum> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<ColorEnum> castAdditionalProperty(Object property) {
    if (property == null) {
      return Optional.empty();
    }
    try {
      return Optional.of((ColorEnum) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(ColorEnum additionalPropertiesValue) {
      return additionalPropertiesValue != null;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of ColorEnum")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return additionalProperties.values()
        .stream()
        .filter(Objects::nonNull)
        .allMatch(v -> castAdditionalProperty(v).isPresent());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, ColorEnum value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<ColorEnum> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, ColorEnum value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<ColorEnum> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, ColorEnum value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<ColorEnum> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


integerMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, Integer> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @Valid
  @JsonAnyGetter
  private Map<String, @NotNull Integer> getAdditionalProperties_() {
    final Map<String, Integer> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> {
          if (value == null) {
            props.put(key, null);
          } else {
            castAdditionalProperty(value).ifPresent(val -> props.put(key, val));
          }
        });
    return props;
  }

  @JsonIgnore
  public List<AdditionalProperty<Integer>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .flatMap(
            entry -> 
                castAdditionalProperty(entry.getValue())
                    .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                    .map(Stream::of)
                    .orElseGet(Stream::empty))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Integer> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<Integer> castAdditionalProperty(Object property) {
    if (property == null) {
      return Optional.empty();
    }
    try {
      return Optional.of((Integer) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Integer additionalPropertiesValue) {
      return additionalPropertiesValue != null;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of Integer")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return additionalProperties.values()
        .stream()
        .filter(Objects::nonNull)
        .allMatch(v -> castAdditionalProperty(v).isPresent());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Integer value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<Integer> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Integer> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Integer value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<Integer> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Integer> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Integer value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<Integer> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Integer> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


jsonSupportJackson=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
@JsonDeserialize(builder = UserDto.Builder.class)
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final boolean isLanguageNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      boolean isLanguageNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.isLanguageNotNull = isLanguageNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  @JsonIgnore
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  @JsonIgnore
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  @JsonProperty("language")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LanguageEnum getLanguageRaw() {
    return language;
  }

  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), isLanguageNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return isLanguageNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.isLanguageNotNull, other.isLanguageNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      isLanguageNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "isLanguageNotNull=" + isLanguageNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Long id;
    private String name;
    private LanguageEnum language;
    private boolean isLanguageNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    @JsonProperty("id")
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    @JsonProperty("name")
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    @JsonProperty("language")
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      this.isLanguageNotNull = language != null;
      return this;
    }

    /**
     * Preferred language of this user
     */
    @JsonIgnore
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      this.isLanguageNotNull = true;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("id");
      additionalProperties.remove("name");
      additionalProperties.remove("language");

      return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
    }
  }

}
]


minimalPojoSetting=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final boolean isLanguageNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      boolean isLanguageNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.isLanguageNotNull = isLanguageNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), isLanguageNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return isLanguageNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.isLanguageNotNull, other.isLanguageNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      isLanguageNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "isLanguageNotNull=" + isLanguageNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private LanguageEnum language;
    private boolean isLanguageNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      this.isLanguageNotNull = language != null;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      this.isLanguageNotNull = true;
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("id");
      additionalProperties.remove("name");
      additionalProperties.remove("language");

      return new UserDto(id, name, language, isLanguageNotNull, additionalProperties);
    }
  }

}
]


necessityAndNullabilityVariants=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

/**
 * NecessityAndNullability
 */
@JsonDeserialize(builder = NecessityAndNullabilityDto.Builder.class)
public class NecessityAndNullabilityDto {
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final boolean isOptionalStringValNotNull;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final List<String> requiredListWithNullableItems;
  private final List<String> requiredNullableListWithNullableItems;
  private final boolean isRequiredNullableListWithNullableItemsPresent;
  private final List<String> optionalListWithNullableItems;
  private final boolean isOptionalListWithNullableItemsNotNull;
  private final List<String> optionalNullableListWithNullableItems;
  private final boolean isOptionalNullableListWithNullableItemsNull;
  private final Map<String, Object> additionalProperties;

  public NecessityAndNullabilityDto(
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      boolean isOptionalStringValNotNull,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      List<String> requiredListWithNullableItems,
      List<String> requiredNullableListWithNullableItems,
      boolean isRequiredNullableListWithNullableItemsPresent,
      List<String> optionalListWithNullableItems,
      boolean isOptionalListWithNullableItemsNotNull,
      List<String> optionalNullableListWithNullableItems,
      boolean isOptionalNullableListWithNullableItemsNull,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.isOptionalStringValNotNull = isOptionalStringValNotNull;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.requiredListWithNullableItems = requiredListWithNullableItems;
    this.requiredNullableListWithNullableItems = requiredNullableListWithNullableItems;
    this.isRequiredNullableListWithNullableItemsPresent = isRequiredNullableListWithNullableItemsPresent;
    this.optionalListWithNullableItems = optionalListWithNullableItems;
    this.isOptionalListWithNullableItemsNotNull = isOptionalListWithNullableItemsNotNull;
    this.optionalNullableListWithNullableItems = optionalNullableListWithNullableItems;
    this.isOptionalNullableListWithNullableItemsNull = isOptionalNullableListWithNullableItemsNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  /**
   * RequiredNullableStringVal
   */
  @JsonIgnore
  public Optional<String> getRequiredNullableStringVal() {
    return Optional.ofNullable(requiredNullableStringVal);
  }

  /**
   * RequiredNullableStringVal
   */
  @JsonIgnore
  public String getRequiredNullableStringValOr(String defaultValue) {
    return this.requiredNullableStringVal == null ? defaultValue : this.requiredNullableStringVal;
  }

  @Pattern(regexp="Hello")
  @JsonProperty("requiredNullableStringVal")
  private String getRequiredNullableStringValRaw() {
    return requiredNullableStringVal;
  }

  @AssertTrue(message = "requiredNullableStringVal is required but it is not present")
  @JsonIgnore
  private boolean isRequiredNullableStringValPresent() {
    return isRequiredNullableStringValPresent;
  }

  /**
   * OptionalStringVal
   */
  @JsonIgnore
  public Optional<String> getOptionalStringVal() {
    return Optional.ofNullable(optionalStringVal);
  }

  /**
   * OptionalStringVal
   */
  @JsonIgnore
  public String getOptionalStringValOr(String defaultValue) {
    return this.optionalStringVal == null ? defaultValue : this.optionalStringVal;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  @Pattern(regexp="Hello")
  private String getOptionalStringValRaw() {
    return optionalStringVal;
  }

  @AssertTrue(message = "optionalStringVal is required to be non-null but is null")
  @JsonIgnore
  private boolean isOptionalStringValNotNull() {
    return isOptionalStringValNotNull;
  }

  /**
   * OptionalNullableStringVal
   */
  @JsonIgnore
  public Tristate<String> getOptionalNullableStringVal() {
    return Tristate.ofNullableAndNullFlag(optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringValJackson() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Pattern(regexp="Hello")
  @JsonIgnore
  private String getOptionalNullableStringValRaw() {
    return optionalNullableStringVal;
  }

  public List<Optional<String>> getRequiredListWithNullableItems() {
    return wrapNullableItemsList(requiredListWithNullableItems);
  }
.
.
  @NotNull
  @Size(min = 5, max = 10)
  @JsonProperty("requiredListWithNullableItems")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private List<@Pattern(regexp="Hello") String> getRequiredListWithNullableItemsRaw() {
    return requiredListWithNullableItems;
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  @JsonIgnore
  public Optional<List<Optional<String>>> getRequiredNullableListWithNullableItems() {
    return Optional.ofNullable(wrapNullableItemsList(requiredNullableListWithNullableItems));
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  @JsonIgnore
  public List<Optional<String>> getRequiredNullableListWithNullableItemsOr(List<Optional<String>> defaultValue) {
    return this.requiredNullableListWithNullableItems == null ? defaultValue : wrapNullableItemsList(this.requiredNullableListWithNullableItems);
  }
.
.
  @Size(min = 5, max = 10)
  @JsonProperty("requiredNullableListWithNullableItems")
  private List<@Pattern(regexp="Hello") String> getRequiredNullableListWithNullableItemsRaw() {
    return requiredNullableListWithNullableItems;
  }

  @AssertTrue(message = "requiredNullableListWithNullableItems is required but it is not present")
  @JsonIgnore
  private boolean isRequiredNullableListWithNullableItemsPresent() {
    return isRequiredNullableListWithNullableItemsPresent;
  }

  /**
   * OptionalListWithNullableItems
   */
  @JsonIgnore
  public Optional<List<Optional<String>>> getOptionalListWithNullableItems() {
    return Optional.ofNullable(wrapNullableItemsList(optionalListWithNullableItems));
  }

  /**
   * OptionalListWithNullableItems
   */
  @JsonIgnore
  public List<Optional<String>> getOptionalListWithNullableItemsOr(List<Optional<String>> defaultValue) {
    return this.optionalListWithNullableItems == null ? defaultValue : wrapNullableItemsList(this.optionalListWithNullableItems);
  }
.
.
  @Size(min = 5, max = 10)
  @JsonProperty("optionalListWithNullableItems")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private List<@Pattern(regexp="Hello") String> getOptionalListWithNullableItemsRaw() {
    return optionalListWithNullableItems;
  }

  @AssertTrue(message = "optionalListWithNullableItems is required to be non-null but is null")
  @JsonIgnore
  private boolean isOptionalListWithNullableItemsNotNull() {
    return isOptionalListWithNullableItemsNotNull;
  }

  @JsonIgnore
  public Tristate<List<Optional<String>>> getOptionalNullableListWithNullableItems() {
    return Tristate.ofNullableAndNullFlag(wrapNullableItemsList(optionalNullableListWithNullableItems), isOptionalNullableListWithNullableItemsNull);
  }

  @JsonProperty("optionalNullableListWithNullableItems")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableListWithNullableItemsJackson() {
    return isOptionalNullableListWithNullableItemsNull ? new JacksonNullContainer<>(optionalNullableListWithNullableItems) : optionalNullableListWithNullableItems;
  }
.
.
  @JsonIgnore
  @Size(min = 5, max = 10)
  private List<@Pattern(regexp="Hello") String> getOptionalNullableListWithNullableItemsRaw() {
    return optionalNullableListWithNullableItems;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (isRequiredNullableStringValPresent ? 1 : 0) +
      (optionalStringVal != null ? 1 : 0) +
      ((isOptionalNullableStringValNull || optionalNullableStringVal != null) ? 1 : 0) +
      (requiredListWithNullableItems != null ? 1 : 0) +
      (isRequiredNullableListWithNullableItemsPresent ? 1 : 0) +
      (optionalListWithNullableItems != null ? 1 : 0) +
      ((isOptionalNullableListWithNullableItemsNull || optionalNullableListWithNullableItems != null) ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public NecessityAndNullabilityDto withRequiredStringVal(String requiredStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableStringVal
   */
  public NecessityAndNullabilityDto withRequiredNullableStringVal(String requiredNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, true, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableStringVal
   */
  public NecessityAndNullabilityDto withRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal.orElse(null), requiredNullableStringVal.isPresent(), optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalStringVal
   */
  public NecessityAndNullabilityDto withOptionalStringVal(String optionalStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalStringVal
   */
  public NecessityAndNullabilityDto withOptionalStringVal(Optional<String> optionalStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal.orElse(null), isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalNullableStringVal
   */
  public NecessityAndNullabilityDto withOptionalNullableStringVal(String optionalNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, false, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalNullableStringVal
   */
  public NecessityAndNullabilityDto withOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredListWithNullableItems(List<String> requiredListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredListWithNullableItems_(List<Optional<String>> requiredListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, unwrapNullableItemsList(requiredListWithNullableItems), requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems(List<String> requiredNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, true, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems(Optional<List<String>> requiredNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems.orElse(null), requiredNullableListWithNullableItems.isPresent(), optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems_(List<Optional<String>> requiredNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, unwrapNullableItemsList(requiredNullableListWithNullableItems), true, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * RequiredNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withRequiredNullableListWithNullableItems_(Optional<List<Optional<String>>> requiredNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, unwrapNullableItemsList(requiredNullableListWithNullableItems.orElse(null)), requiredNullableListWithNullableItems.isPresent(), optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalListWithNullableItems(List<String> optionalListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalListWithNullableItems(Optional<List<String>> optionalListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems.orElse(null), isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalListWithNullableItems_(List<Optional<String>> optionalListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, unwrapNullableItemsList(optionalListWithNullableItems), isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalListWithNullableItems_(Optional<List<Optional<String>>> optionalListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, unwrapNullableItemsList(optionalListWithNullableItems.orElse(null)), isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
  }

  /**
   * OptionalNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems(List<String> optionalNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, false, additionalProperties);
  }

  /**
   * OptionalNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems(Tristate<List<String>> optionalNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
  }

  /**
   * OptionalNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems_(List<Optional<String>> optionalNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, unwrapNullableItemsList(optionalNullableListWithNullableItems), false, additionalProperties);
  }

  /**
   * OptionalNullableListWithNullableItems
   */
  public NecessityAndNullabilityDto withOptionalNullableListWithNullableItems_(Tristate<List<Optional<String>>> optionalNullableListWithNullableItems) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, unwrapNullableItemsList(optionalNullableListWithNullableItems.onValue(val -> val).onNull(() -> null).onAbsent(() -> null)), optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
  }

  private static <T> List<Optional<T>> wrapNullableItemsList(List<T> list) {
    if (list == null) {
      return null;
    }
    return list.stream().map(Optional::ofNullable).collect(Collectors.toList());
  }

  private static <T> List<T> unwrapNullableItemsList(List<Optional<T>> list) {
    if (list == null) {
      return null;
    }
    return list.stream().map(value -> value.orElse(null)).collect(Collectors.toList());
  }

  private static <T> Optional<List<T>> unwrapOptionalNullableItemsList(Optional<List<Optional<T>>> list) {
    return list.map(l -> unwrapNullableItemsList(l));
  }

  private static <T> Tristate<List<T>> unwrapTristateNullableItemsList(Tristate<List<Optional<T>>> list) {
    return list.map(l -> unwrapNullableItemsList(l));
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isRequiredNullableStringValValid() {
      if(requiredNullableStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredNullableStringVal);
      }

      return isRequiredNullableStringValPresent;
    }

    private boolean isOptionalStringValValid() {
      if(optionalStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", optionalStringVal);
      }

      return isOptionalStringValNotNull;
    }

    private boolean isOptionalNullableStringValValid() {
      if(optionalNullableStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", optionalNullableStringVal);
      }

      return true;
    }

    private boolean isRequiredListWithNullableItemsValid() {
      if(requiredListWithNullableItems != null) {
        return 5 <= requiredListWithNullableItems.size()
            && requiredListWithNullableItems.size() <= 10
            && requiredListWithNullableItems.stream().allMatch(this::isRequiredListWithNullableItemsValueValid);
      }

      return false;
    }

    private boolean isRequiredListWithNullableItemsValueValid(String requiredListWithNullableItemsValue) {
      if(requiredListWithNullableItemsValue != null) {
        return java.util.regex.Pattern.matches("Hello", requiredListWithNullableItemsValue);
      }

      return true;
    }

    private boolean isRequiredNullableListWithNullableItemsValid() {
      if(requiredNullableListWithNullableItems != null) {
        return 5 <= requiredNullableListWithNullableItems.size()
            && requiredNullableListWithNullableItems.size() <= 10
            && requiredNullableListWithNullableItems.stream().allMatch(this::isRequiredNullableListWithNullableItemsValueValid);
      }

      return isRequiredNullableListWithNullableItemsPresent;
    }

    private boolean isRequiredNullableListWithNullableItemsValueValid(String requiredNullableListWithNullableItemsValue) {
      if(requiredNullableListWithNullableItemsValue != null) {
        return java.util.regex.Pattern.matches("Hello", requiredNullableListWithNullableItemsValue);
      }

      return true;
    }

    private boolean isOptionalListWithNullableItemsValid() {
      if(optionalListWithNullableItems != null) {
        return 5 <= optionalListWithNullableItems.size()
            && optionalListWithNullableItems.size() <= 10
            && optionalListWithNullableItems.stream().allMatch(this::isOptionalListWithNullableItemsValueValid);
      }

      return isOptionalListWithNullableItemsNotNull;
    }

    private boolean isOptionalListWithNullableItemsValueValid(String optionalListWithNullableItemsValue) {
      if(optionalListWithNullableItemsValue != null) {
        return java.util.regex.Pattern.matches("Hello", optionalListWithNullableItemsValue);
      }

      return true;
    }

    private boolean isOptionalNullableListWithNullableItemsValid() {
      if(optionalNullableListWithNullableItems != null) {
        return 5 <= optionalNullableListWithNullableItems.size()
            && optionalNullableListWithNullableItems.size() <= 10
            && optionalNullableListWithNullableItems.stream().allMatch(this::isOptionalNullableListWithNullableItemsValueValid);
      }

      return true;
    }

    private boolean isOptionalNullableListWithNullableItemsValueValid(String optionalNullableListWithNullableItemsValue) {
      if(optionalNullableListWithNullableItemsValue != null) {
        return java.util.regex.Pattern.matches("Hello", optionalNullableListWithNullableItemsValue);
      }

      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && isRequiredNullableStringValValid()
          && isOptionalStringValValid()
          && isOptionalNullableStringValValid()
          && isRequiredListWithNullableItemsValid()
          && isRequiredNullableListWithNullableItemsValid()
          && isOptionalListWithNullableItemsValid()
          && isOptionalNullableListWithNullableItemsValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final NecessityAndNullabilityDto other = (NecessityAndNullabilityDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.isOptionalStringValNotNull, other.isOptionalStringValNotNull)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.requiredListWithNullableItems, other.requiredListWithNullableItems)
        && Objects.deepEquals(this.requiredNullableListWithNullableItems, other.requiredNullableListWithNullableItems)
        && Objects.deepEquals(this.isRequiredNullableListWithNullableItemsPresent, other.isRequiredNullableListWithNullableItemsPresent)
        && Objects.deepEquals(this.optionalListWithNullableItems, other.optionalListWithNullableItems)
        && Objects.deepEquals(this.isOptionalListWithNullableItemsNotNull, other.isOptionalListWithNullableItemsNotNull)
        && Objects.deepEquals(this.optionalNullableListWithNullableItems, other.optionalNullableListWithNullableItems)
        && Objects.deepEquals(this.isOptionalNullableListWithNullableItemsNull, other.isOptionalNullableListWithNullableItemsNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      isOptionalStringValNotNull,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      requiredListWithNullableItems,
      requiredNullableListWithNullableItems,
      isRequiredNullableListWithNullableItemsPresent,
      optionalListWithNullableItems,
      isOptionalListWithNullableItemsNotNull,
      optionalNullableListWithNullableItems,
      isOptionalNullableListWithNullableItemsNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "NecessityAndNullabilityDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "isOptionalStringValNotNull=" + isOptionalStringValNotNull + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "requiredListWithNullableItems=" + requiredListWithNullableItems + ", " +
      "requiredNullableListWithNullableItems=" + requiredNullableListWithNullableItems + ", " +
      "isRequiredNullableListWithNullableItemsPresent=" + isRequiredNullableListWithNullableItemsPresent + ", " +
      "optionalListWithNullableItems=" + optionalListWithNullableItems + ", " +
      "isOptionalListWithNullableItemsNotNull=" + isOptionalListWithNullableItemsNotNull + ", " +
      "optionalNullableListWithNullableItems=" + optionalNullableListWithNullableItems + ", " +
      "isOptionalNullableListWithNullableItemsNull=" + isOptionalNullableListWithNullableItemsNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private boolean isOptionalStringValNotNull = true;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private List<String> requiredListWithNullableItems;
    private List<String> requiredNullableListWithNullableItems;
    private boolean isRequiredNullableListWithNullableItemsPresent = false;
    private List<String> optionalListWithNullableItems;
    private boolean isOptionalListWithNullableItemsNotNull = true;
    private List<String> optionalNullableListWithNullableItems;
    private boolean isOptionalNullableListWithNullableItemsNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonIgnore
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      this.isOptionalStringValNotNull = optionalStringVal != null;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonIgnore
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      this.isOptionalStringValNotNull = true;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonIgnore
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    /**
     * RequiredListWithNullableItems
     */
    @JsonProperty("requiredListWithNullableItems")
    private Builder setRequiredListWithNullableItems(List<String> requiredListWithNullableItems) {
      this.requiredListWithNullableItems = requiredListWithNullableItems;
      return this;
    }

    /**
     * RequiredListWithNullableItems
     */
    @JsonIgnore
    private Builder setRequiredListWithNullableItems_(List<Optional<String>> requiredListWithNullableItems) {
      this.requiredListWithNullableItems = unwrapNullableItemsList(requiredListWithNullableItems);
      return this;
    }

    /**
     * RequiredNullableListWithNullableItems
     */
    @JsonProperty("requiredNullableListWithNullableItems")
    private Builder setRequiredNullableListWithNullableItems(List<String> requiredNullableListWithNullableItems) {
      this.requiredNullableListWithNullableItems = requiredNullableListWithNullableItems;
      this.isRequiredNullableListWithNullableItemsPresent = true;
      return this;
    }

    /**
     * RequiredNullableListWithNullableItems
     */
    @JsonIgnore
    private Builder setRequiredNullableListWithNullableItems(Optional<List<String>> requiredNullableListWithNullableItems) {
      this.requiredNullableListWithNullableItems = requiredNullableListWithNullableItems.orElse(null);
      this.isRequiredNullableListWithNullableItemsPresent = true;
      return this;
    }

    /**
     * RequiredNullableListWithNullableItems
     */
    @JsonIgnore
    private Builder setRequiredNullableListWithNullableItems_(List<Optional<String>> requiredNullableListWithNullableItems) {
      this.requiredNullableListWithNullableItems = unwrapNullableItemsList(requiredNullableListWithNullableItems);
      this.isRequiredNullableListWithNullableItemsPresent = true;
      return this;
    }

    /**
     * RequiredNullableListWithNullableItems
     */
    @JsonIgnore
    private Builder setRequiredNullableListWithNullableItems_(Optional<List<Optional<String>>> requiredNullableListWithNullableItems) {
      this.requiredNullableListWithNullableItems = requiredNullableListWithNullableItems.map(l -> unwrapNullableItemsList(l)).orElse(null);
      this.isRequiredNullableListWithNullableItemsPresent = true;
      return this;
    }

    /**
     * OptionalListWithNullableItems
     */
    @JsonProperty("optionalListWithNullableItems")
    public Builder setOptionalListWithNullableItems(List<String> optionalListWithNullableItems) {
      this.optionalListWithNullableItems = optionalListWithNullableItems;
      this.isOptionalListWithNullableItemsNotNull = optionalListWithNullableItems != null;
      return this;
    }

    /**
     * OptionalListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalListWithNullableItems(Optional<List<String>> optionalListWithNullableItems) {
      this.optionalListWithNullableItems = optionalListWithNullableItems.orElse(null);
      this.isOptionalListWithNullableItemsNotNull = true;
      return this;
    }

    /**
     * OptionalListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalListWithNullableItems_(List<Optional<String>> optionalListWithNullableItems) {
      this.optionalListWithNullableItems = unwrapNullableItemsList(optionalListWithNullableItems);
      this.isOptionalListWithNullableItemsNotNull = true;
      return this;
    }

    /**
     * OptionalListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalListWithNullableItems_(Optional<List<Optional<String>>> optionalListWithNullableItems) {
      this.optionalListWithNullableItems = optionalListWithNullableItems.map(l -> unwrapNullableItemsList(l)).orElse(null);
      this.isOptionalListWithNullableItemsNotNull = true;
      return this;
    }

    /**
     * OptionalNullableListWithNullableItems
     */
    @JsonProperty("optionalNullableListWithNullableItems")
    public Builder setOptionalNullableListWithNullableItems(List<String> optionalNullableListWithNullableItems) {
      this.optionalNullableListWithNullableItems = optionalNullableListWithNullableItems;
      this.isOptionalNullableListWithNullableItemsNull = optionalNullableListWithNullableItems == null;
      return this;
    }

    /**
     * OptionalNullableListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalNullableListWithNullableItems(Tristate<List<String>> optionalNullableListWithNullableItems) {
      this.optionalNullableListWithNullableItems = optionalNullableListWithNullableItems.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableListWithNullableItemsNull = optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    /**
     * OptionalNullableListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalNullableListWithNullableItems_(List<Optional<String>> optionalNullableListWithNullableItems) {
      this.optionalNullableListWithNullableItems = unwrapNullableItemsList(optionalNullableListWithNullableItems);
      isOptionalNullableListWithNullableItemsNull = false;
      return this;
    }

    /**
     * OptionalNullableListWithNullableItems
     */
    @JsonIgnore
    public Builder setOptionalNullableListWithNullableItems_(Tristate<List<Optional<String>>> optionalNullableListWithNullableItems) {
      this.optionalNullableListWithNullableItems = optionalNullableListWithNullableItems.onValue(l -> unwrapNullableItemsList(l)).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableListWithNullableItemsNull = optionalNullableListWithNullableItems.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public NecessityAndNullabilityDto build() {
      additionalProperties.remove("requiredStringVal");
      additionalProperties.remove("requiredNullableStringVal");
      additionalProperties.remove("optionalStringVal");
      additionalProperties.remove("optionalNullableStringVal");
      additionalProperties.remove("requiredListWithNullableItems");
      additionalProperties.remove("requiredNullableListWithNullableItems");
      additionalProperties.remove("optionalListWithNullableItems");
      additionalProperties.remove("optionalNullableListWithNullableItems");

      return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, isOptionalStringValNotNull, optionalNullableStringVal, isOptionalNullableStringValNull, requiredListWithNullableItems, requiredNullableListWithNullableItems, isRequiredNullableListWithNullableItemsPresent, optionalListWithNullableItems, isOptionalListWithNullableItemsNotNull, optionalNullableListWithNullableItems, isOptionalNullableListWithNullableItemsNull, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullNecessityAndNullabilityDtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 necessityAndNullabilityDtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public FullPropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new FullPropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class FullPropertyBuilder1 {
      private final Builder builder;

      private FullPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredNullableStringVal
       */
      public FullPropertyBuilder2 setRequiredNullableStringVal(String requiredNullableStringVal) {
        return new FullPropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
      }

      /**
       * RequiredNullableStringVal
       */
      public FullPropertyBuilder2 setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
        return new FullPropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
      }

    }

    public static final class FullPropertyBuilder2 {
      private final Builder builder;

      private FullPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredListWithNullableItems
       */
      public FullPropertyBuilder3 setRequiredListWithNullableItems(List<String> requiredListWithNullableItems) {
        return new FullPropertyBuilder3(builder.setRequiredListWithNullableItems(requiredListWithNullableItems));
      }

      /**
       * RequiredListWithNullableItems
       */
      public FullPropertyBuilder3 setRequiredListWithNullableItems_(List<Optional<String>> requiredListWithNullableItems) {
        return new FullPropertyBuilder3(builder.setRequiredListWithNullableItems_(requiredListWithNullableItems));
      }

    }

    public static final class FullPropertyBuilder3 {
      private final Builder builder;

      private FullPropertyBuilder3(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public FullOptPropertyBuilder0 setRequiredNullableListWithNullableItems(List<String> requiredNullableListWithNullableItems) {
        return new FullOptPropertyBuilder0(builder.setRequiredNullableListWithNullableItems(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public FullOptPropertyBuilder0 setRequiredNullableListWithNullableItems(Optional<List<String>> requiredNullableListWithNullableItems) {
        return new FullOptPropertyBuilder0(builder.setRequiredNullableListWithNullableItems(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public FullOptPropertyBuilder0 setRequiredNullableListWithNullableItems_(List<Optional<String>> requiredNullableListWithNullableItems) {
        return new FullOptPropertyBuilder0(builder.setRequiredNullableListWithNullableItems_(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public FullOptPropertyBuilder0 setRequiredNullableListWithNullableItems_(Optional<List<Optional<String>>> requiredNullableListWithNullableItems) {
        return new FullOptPropertyBuilder0(builder.setRequiredNullableListWithNullableItems_(requiredNullableListWithNullableItems));
      }
    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalStringVal
       */
      public FullOptPropertyBuilder1 setOptionalStringVal(String optionalStringVal) {
        return new FullOptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
      }

      /**
       * OptionalStringVal
       */
      public FullOptPropertyBuilder1 setOptionalStringVal(Optional<String> optionalStringVal) {
        return new FullOptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
      }

    }

    public static final class FullOptPropertyBuilder1 {
      private final Builder builder;

      private FullOptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalNullableStringVal
       */
      public FullOptPropertyBuilder2 setOptionalNullableStringVal(String optionalNullableStringVal) {
        return new FullOptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
      }

      /**
       * OptionalNullableStringVal
       */
      public FullOptPropertyBuilder2 setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
        return new FullOptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
      }

    }

    public static final class FullOptPropertyBuilder2 {
      private final Builder builder;

      private FullOptPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalListWithNullableItems
       */
      public FullOptPropertyBuilder3 setOptionalListWithNullableItems(List<String> optionalListWithNullableItems) {
        return new FullOptPropertyBuilder3(builder.setOptionalListWithNullableItems(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public FullOptPropertyBuilder3 setOptionalListWithNullableItems(Optional<List<String>> optionalListWithNullableItems) {
        return new FullOptPropertyBuilder3(builder.setOptionalListWithNullableItems(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public FullOptPropertyBuilder3 setOptionalListWithNullableItems_(List<Optional<String>> optionalListWithNullableItems) {
        return new FullOptPropertyBuilder3(builder.setOptionalListWithNullableItems_(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public FullOptPropertyBuilder3 setOptionalListWithNullableItems_(Optional<List<Optional<String>>> optionalListWithNullableItems) {
        return new FullOptPropertyBuilder3(builder.setOptionalListWithNullableItems_(optionalListWithNullableItems));
      }

    }

    public static final class FullOptPropertyBuilder3 {
      private final Builder builder;

      private FullOptPropertyBuilder3(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public FullOptPropertyBuilder4 setOptionalNullableListWithNullableItems(List<String> optionalNullableListWithNullableItems) {
        return new FullOptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public FullOptPropertyBuilder4 setOptionalNullableListWithNullableItems(Tristate<List<String>> optionalNullableListWithNullableItems) {
        return new FullOptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public FullOptPropertyBuilder4 setOptionalNullableListWithNullableItems_(List<Optional<String>> optionalNullableListWithNullableItems) {
        return new FullOptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems_(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public FullOptPropertyBuilder4 setOptionalNullableListWithNullableItems_(Tristate<List<Optional<String>>> optionalNullableListWithNullableItems) {
        return new FullOptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems_(optionalNullableListWithNullableItems));
      }
    }

    public static final class FullOptPropertyBuilder4 {
      private final Builder builder;

      private FullOptPropertyBuilder4(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder4 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder4(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder4 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder4(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder4 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder4(builder.setAdditionalProperties(additionalProperties));
      }

      public NecessityAndNullabilityDto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredNullableStringVal
       */
      public PropertyBuilder2 setRequiredNullableStringVal(String requiredNullableStringVal) {
        return new PropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
      }

      /**
       * RequiredNullableStringVal
       */
      public PropertyBuilder2 setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
        return new PropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
      }

    }

    public static final class PropertyBuilder2 {
      private final Builder builder;

      private PropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredListWithNullableItems
       */
      public PropertyBuilder3 setRequiredListWithNullableItems(List<String> requiredListWithNullableItems) {
        return new PropertyBuilder3(builder.setRequiredListWithNullableItems(requiredListWithNullableItems));
      }

      /**
       * RequiredListWithNullableItems
       */
      public PropertyBuilder3 setRequiredListWithNullableItems_(List<Optional<String>> requiredListWithNullableItems) {
        return new PropertyBuilder3(builder.setRequiredListWithNullableItems_(requiredListWithNullableItems));
      }

    }

    public static final class PropertyBuilder3 {
      private final Builder builder;

      private PropertyBuilder3(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public PropertyBuilder4 setRequiredNullableListWithNullableItems(List<String> requiredNullableListWithNullableItems) {
        return new PropertyBuilder4(builder.setRequiredNullableListWithNullableItems(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public PropertyBuilder4 setRequiredNullableListWithNullableItems(Optional<List<String>> requiredNullableListWithNullableItems) {
        return new PropertyBuilder4(builder.setRequiredNullableListWithNullableItems(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public PropertyBuilder4 setRequiredNullableListWithNullableItems_(List<Optional<String>> requiredNullableListWithNullableItems) {
        return new PropertyBuilder4(builder.setRequiredNullableListWithNullableItems_(requiredNullableListWithNullableItems));
      }

      /**
       * RequiredNullableListWithNullableItems
       */
      public PropertyBuilder4 setRequiredNullableListWithNullableItems_(Optional<List<Optional<String>>> requiredNullableListWithNullableItems) {
        return new PropertyBuilder4(builder.setRequiredNullableListWithNullableItems_(requiredNullableListWithNullableItems));
      }
    }

    public static final class PropertyBuilder4 {
      private final Builder builder;

      private PropertyBuilder4(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public NecessityAndNullabilityDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalStringVal
       */
      public OptPropertyBuilder1 setOptionalStringVal(String optionalStringVal) {
        return new OptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
      }

      /**
       * OptionalStringVal
       */
      public OptPropertyBuilder1 setOptionalStringVal(Optional<String> optionalStringVal) {
        return new OptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
      }

    }

    public static final class OptPropertyBuilder1 {
      private final Builder builder;

      private OptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalNullableStringVal
       */
      public OptPropertyBuilder2 setOptionalNullableStringVal(String optionalNullableStringVal) {
        return new OptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
      }

      /**
       * OptionalNullableStringVal
       */
      public OptPropertyBuilder2 setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
        return new OptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
      }

    }

    public static final class OptPropertyBuilder2 {
      private final Builder builder;

      private OptPropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalListWithNullableItems
       */
      public OptPropertyBuilder3 setOptionalListWithNullableItems(List<String> optionalListWithNullableItems) {
        return new OptPropertyBuilder3(builder.setOptionalListWithNullableItems(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public OptPropertyBuilder3 setOptionalListWithNullableItems(Optional<List<String>> optionalListWithNullableItems) {
        return new OptPropertyBuilder3(builder.setOptionalListWithNullableItems(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public OptPropertyBuilder3 setOptionalListWithNullableItems_(List<Optional<String>> optionalListWithNullableItems) {
        return new OptPropertyBuilder3(builder.setOptionalListWithNullableItems_(optionalListWithNullableItems));
      }

      /**
       * OptionalListWithNullableItems
       */
      public OptPropertyBuilder3 setOptionalListWithNullableItems_(Optional<List<Optional<String>>> optionalListWithNullableItems) {
        return new OptPropertyBuilder3(builder.setOptionalListWithNullableItems_(optionalListWithNullableItems));
      }

    }

    public static final class OptPropertyBuilder3 {
      private final Builder builder;

      private OptPropertyBuilder3(Builder builder) {
        this.builder = builder;
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public OptPropertyBuilder4 setOptionalNullableListWithNullableItems(List<String> optionalNullableListWithNullableItems) {
        return new OptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public OptPropertyBuilder4 setOptionalNullableListWithNullableItems(Tristate<List<String>> optionalNullableListWithNullableItems) {
        return new OptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public OptPropertyBuilder4 setOptionalNullableListWithNullableItems_(List<Optional<String>> optionalNullableListWithNullableItems) {
        return new OptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems_(optionalNullableListWithNullableItems));
      }

      /**
       * OptionalNullableListWithNullableItems
       */
      public OptPropertyBuilder4 setOptionalNullableListWithNullableItems_(Tristate<List<Optional<String>>> optionalNullableListWithNullableItems) {
        return new OptPropertyBuilder4(builder.setOptionalNullableListWithNullableItems_(optionalNullableListWithNullableItems));
      }
    }

    public static final class OptPropertyBuilder4 {
      private final Builder builder;

      private OptPropertyBuilder4(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder4 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder4(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder4 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder4(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder4 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder4(builder.setAdditionalProperties(additionalProperties));
      }

      public NecessityAndNullabilityDto build(){
        return builder.build();
      }
    }
  }
}
]


noAdditionalPropertiesAllowed=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import javax.validation.constraints.AssertTrue;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isValid() {
      return additionalProperties.isEmpty();
    }
  }

  @AssertTrue(message = "No additional properties allowed")
  private boolean hasNoAdditionalProperties() {
    return additionalProperties.size() == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    @JsonAnySetter
    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    private Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


objectMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @Valid
  @JsonAnyGetter
  private Map<String, @NotNull @Valid HelloDto> getAdditionalProperties_() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> {
          if (value == null) {
            props.put(key, null);
          } else {
            castAdditionalProperty(value).ifPresent(val -> props.put(key, val));
          }
        });
    return props;
  }

  @JsonIgnore
  public List<AdditionalProperty<HelloDto>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .flatMap(
            entry -> 
                castAdditionalProperty(entry.getValue())
                    .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                    .map(Stream::of)
                    .orElseGet(Stream::empty))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    if (property == null) {
      return Optional.empty();
    }
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return false;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of HelloDto")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return additionalProperties.values()
        .stream()
        .filter(Objects::nonNull)
        .allMatch(v -> castAdditionalProperty(v).isPresent());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<HelloDto> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


objectMapDisabledValidation=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  private Map<String, HelloDto> getAdditionalProperties_() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> {
          if (value == null) {
            props.put(key, null);
          } else {
            castAdditionalProperty(value).ifPresent(val -> props.put(key, val));
          }
        });
    return props;
  }

  @JsonIgnore
  public List<AdditionalProperty<HelloDto>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .flatMap(
            entry -> 
                castAdditionalProperty(entry.getValue())
                    .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                    .map(Stream::of)
                    .orElseGet(Stream::empty))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    if (property == null) {
      return Optional.empty();
    }
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return false;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return additionalProperties.values()
        .stream()
        .filter(Objects::nonNull)
        .allMatch(v -> castAdditionalProperty(v).isPresent());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<HelloDto> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


objectMapNoJsonSupport=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.AdditionalProperty;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @Valid
  private Map<String, @NotNull @Valid HelloDto> getAdditionalProperties_() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> {
          if (value == null) {
            props.put(key, null);
          } else {
            castAdditionalProperty(value).ifPresent(val -> props.put(key, val));
          }
        });
    return props;
  }

  public List<AdditionalProperty<HelloDto>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .flatMap(
            entry -> 
                castAdditionalProperty(entry.getValue())
                    .map(val -> new AdditionalProperty<>(entry.getKey(), val))
                    .map(Stream::of)
                    .orElseGet(Stream::empty))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    if (property == null) {
      return Optional.empty();
    }
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return false;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "Not all additional properties are instances of HelloDto")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return additionalProperties.values()
        .stream()
        .filter(Objects::nonNull)
        .allMatch(v -> castAdditionalProperty(v).isPresent());
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Optional<HelloDto> value) {
      value.ifPresent(val -> this.additionalProperties.put(key, val));
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullOptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 builder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.OptPropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Optional<HelloDto> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


objectWithArrayWithUniqueItems=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final List<String> listVal;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      List<String> listVal,
      Map<String, Object> additionalProperties
    ) {
    this.listVal = listVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * List
   */
  @NotNull
  public List<@NotNull String> getListVal() {
    return listVal;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (listVal != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * List
   */
  public ObjectPojo1Dto withListVal(List<String> listVal) {
    return new ObjectPojo1Dto(listVal, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isListValValid() {
      if(listVal != null) {
        return hasListValUniqueItems()
            && listVal.stream().allMatch(this::isListValValueValid);
      }

      return false;
    }

    private boolean isListValValueValid(String listValValue) {
      return listValValue != null;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isListValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "listVal does not contain unique items")
  private boolean hasListValUniqueItems() {
    return new HashSet<>(listVal).size() == listVal.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.listVal, other.listVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      listVal,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "listVal=" + listVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private List<String> listVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * List
     */
    @JsonProperty("listVal")
    private Builder setListVal(List<String> listVal) {
      this.listVal = listVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      additionalProperties.remove("listVal");

      return new ObjectPojo1Dto(listVal, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * List
       */
      public FullOptPropertyBuilder0 setListVal(List<String> listVal) {
        return new FullOptPropertyBuilder0(builder.setListVal(listVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * List
       */
      public PropertyBuilder1 setListVal(List<String> listVal) {
        return new PropertyBuilder1(builder.setListVal(listVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


objectWithMapMember=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, UUID> mapVal;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      Map<String, UUID> mapVal,
      Map<String, Object> additionalProperties
    ) {
    this.mapVal = mapVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Map
   */
  @NotNull
  @Size(min = 3, max = 8)
  public Map<String, @NotNull UUID> getMapVal() {
    return mapVal;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (mapVal != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Map
   */
  public ObjectPojo1Dto withMapVal(Map<String, UUID> mapVal) {
    return new ObjectPojo1Dto(mapVal, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isMapValValid() {
      if(mapVal != null) {
        return 3 <= mapVal.size()
            && mapVal.size() <= 8
            && mapVal.values().stream().allMatch(this::isMapValValueValid);
      }

      return false;
    }

    private boolean isMapValValueValid(UUID mapValValue) {
      return mapValValue != null;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isMapValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.mapVal, other.mapVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      mapVal,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "mapVal=" + mapVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, UUID> mapVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Map
     */
    @JsonProperty("mapVal")
    private Builder setMapVal(Map<String, UUID> mapVal) {
      this.mapVal = mapVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      additionalProperties.remove("mapVal");

      return new ObjectPojo1Dto(mapVal, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Map
       */
      public FullOptPropertyBuilder0 setMapVal(Map<String, UUID> mapVal) {
        return new FullOptPropertyBuilder0(builder.setMapVal(mapVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Map
       */
      public PropertyBuilder1 setMapVal(Map<String, UUID> mapVal) {
        return new PropertyBuilder1(builder.setMapVal(mapVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]


oneOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertFalse;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  LocalDate getBirthdateJson() {
    return birthdate;
  }

  @JsonIgnore
  LocalDate getBirthdate() {
    return birthdate;
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  String getUsernameJson() {
    return username;
  }

  @JsonIgnore
  String getUsername() {
    return username;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns {@link AdminDto} of the oneOf composition in case it is valid against
   * the schema Admin wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<AdminDto> getAdminDto() {
    return foldOneOf(Optional::of, ignore -> Optional.empty(), Optional::empty);
  }

  /**
   * Returns {@link UserDto} of the oneOf composition in case it is valid against the
   * schema User wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<UserDto> getUserDto() {
    return foldOneOf(ignore -> Optional.empty(), Optional::of, Optional::empty);
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Folds the oneOf part of this instance using the given mapping functions for the
   * DTO's. If this instance is valid against exactly one of the specified schemas,
   * its corresponding mapping function gets executed with the DTO as input and its
   * result is returned.<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * Unlike {@link PersonDto#foldOneOf(Function, Function)}, this method accepts as
   * last parameter a {@link Supplier} which gets called in case this instance is not
   * valid against exactly one of the defined oneOf schemas and its value is
   * returned.
   */
  public <T> T foldOneOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto, Supplier<T> onInvalid) {
    if (isValidAgainstAdminDto()) {
      return onAdminDto.apply(asAdminDto());
    }
    else if (isValidAgainstUserDto()) {
      return onUserDto.apply(asUserDto());
    }
    else {
      return onInvalid.get();
    }
  }

  /**
   * Folds the oneOf part of this instance using the given mapping functions for the
   * DTO's. If this instance is valid against exactly one of the specified schemas,
   * its corresponding mapping function gets executed with the DTO as input and its
   * result is returned.<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * This method assumes this instance is either manually or automatically validated,
   * i.e. it is valid against exactly one of the defined oneOf schemas. If not, it
   * will throw an {@link IllegalStateException}
   */
  public <T> T foldOneOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto) {
    return foldOneOf(
      onAdminDto,
      onUserDto,
      () -> {throw new IllegalStateException("Unable to fold the oneOf part of PersonDto: Not valid against one of the schemas [AdminDto, UserDto] or not valid against the schema described by the discriminator.");}
    );
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  @Valid
  @JsonIgnore
  private Map<String, Object> getInvalidOneOf() {
    final Map<String, Object> dtos = new HashMap<>();
    if(getOneOfValidCount() != 1) {
      dtos.put("Admin", asAdminDto());
      dtos.put("User", asUserDto());
    }
    return dtos;
  }

  private boolean isValidAgainstAdminDto() {
    return asAdminDto().isValid();
  }

  private boolean isValidAgainstUserDto() {
    return asUserDto().isValid();
  }

  private int getOneOfValidCount() {
    return
      (isValidAgainstAdminDto() ? 1 : 0) +
      (isValidAgainstUserDto() ? 1 : 0);
  }

  @AssertFalse(message = "Is not valid against one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstNoOneOfSchema() {
    return getOneOfValidCount() == 0;
  }

  @AssertFalse(message = "Is valid against more than one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstMoreThanOneSchema() {
    return getOneOfValidCount() > 1;
  }

  @Valid
  @JsonIgnore
  private Object getOneOf() {
    if (getOneOfValidCount() != 1) {
      return null;
    }
    return foldOneOf(dto -> dto, dto -> dto, () -> null);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && getOneOfValidCount() == 1
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties()
          .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      additionalProperties.remove("requiredStringVal");
      additionalProperties.remove("birthdate");
      additionalProperties.remove("username");

      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOneOfBuilder fullBuilder() {
    return new BuilderStages.FullOneOfBuilder(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullOneOfBuilder fullPersonDtoBuilder() {
    return new BuilderStages.FullOneOfBuilder(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OneOfBuilder builder() {
    return new BuilderStages.OneOfBuilder(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.OneOfBuilder personDtoBuilder() {
    return new BuilderStages.OneOfBuilder(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullOneOfBuilder {
      private final Builder builder;

      private FullOneOfBuilder(Builder builder) {
        this.builder = builder;
      }

      public FullPropertyBuilder0 setAdminDto(AdminDto dto) {
        return new FullPropertyBuilder0(builder.setAdminDto(dto));
      }

      public FullPropertyBuilder0 setUserDto(UserDto dto) {
        return new FullPropertyBuilder0(builder.setUserDto(dto));
      }

      public FullPropertyBuilder0 setOneOfContainer(PersonOneOfContainerDto container) {
        if (container.getAdminDto() != null) {
          builder.setAdminDto(container.getAdminDto());
        }

        if (container.getUserDto() != null) {
          builder.setUserDto(container.getUserDto());
        }
        return new FullPropertyBuilder0(builder);
      }
    }

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
        return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class OneOfBuilder {
      private final Builder builder;

      private OneOfBuilder(Builder builder) {
        this.builder = builder;
      }

      public PropertyBuilder0 setAdminDto(AdminDto dto) {
        return new PropertyBuilder0(builder.setAdminDto(dto));
      }

      public PropertyBuilder0 setUserDto(UserDto dto) {
        return new PropertyBuilder0(builder.setUserDto(dto));
      }

      public PropertyBuilder0 setOneOfContainer(PersonOneOfContainerDto container) {
        if (container.getAdminDto() != null) {
          builder.setAdminDto(container.getAdminDto());
        }

        if (container.getUserDto() != null) {
          builder.setUserDto(container.getUserDto());
        }
        return new PropertyBuilder0(builder);
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * RequiredStringVal
       */
      public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
        return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public PersonDto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
      }

      public PersonDto build(){
        return builder.build();
      }
    }
  }
}
]


pojoWithEnumAndEnumDescription=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;

/**
 * User of the Application
 */
public class UserDto {
  private final LanguageEnum language;
  private final boolean isLanguageNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      LanguageEnum language,
      boolean isLanguageNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.language = language;
    this.isLanguageNotNull = isLanguageNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", "German language"),
    ENGLISH("ENGLISH", "English language");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    public String getDescription() {
      return description;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  private LanguageEnum getLanguageRaw() {
    return language;
  }

  @AssertTrue(message = "language is required to be non-null but is null")
  private boolean isLanguageNotNull() {
    return isLanguageNotNull;
  }

  @Valid
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(language.orElse(null), isLanguageNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isLanguageValid() {
      return isLanguageNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isLanguageValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.isLanguageNotNull, other.isLanguageNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      language,
      isLanguageNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "language=" + language + ", " +
      "isLanguageNotNull=" + isLanguageNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private LanguageEnum language;
    private boolean isLanguageNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      this.isLanguageNotNull = language != null;
      return this;
    }

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      this.isLanguageNotNull = true;
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("language");

      return new UserDto(language, isLanguageNotNull, additionalProperties);
    }
  }

}
]


pojoWithEnumAndEnumDescriptionAndJacksonSupport=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;

/**
 * User of the Application
 */
@JsonDeserialize(builder = UserDto.Builder.class)
public class UserDto {
  private final LanguageEnum language;
  private final boolean isLanguageNotNull;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      LanguageEnum language,
      boolean isLanguageNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.language = language;
    this.isLanguageNotNull = isLanguageNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", "German language"),
    ENGLISH("ENGLISH", "English language");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @JsonIgnore
    public String getDescription() {
      return description;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  @JsonIgnore
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  @JsonIgnore
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  @JsonProperty("language")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LanguageEnum getLanguageRaw() {
    return language;
  }

  @AssertTrue(message = "language is required to be non-null but is null")
  @JsonIgnore
  private boolean isLanguageNotNull() {
    return isLanguageNotNull;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(language, isLanguageNotNull, additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(language.orElse(null), isLanguageNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isLanguageValid() {
      return isLanguageNotNull;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isLanguageValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.isLanguageNotNull, other.isLanguageNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      language,
      isLanguageNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "language=" + language + ", " +
      "isLanguageNotNull=" + isLanguageNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private LanguageEnum language;
    private boolean isLanguageNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    @JsonProperty("language")
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      this.isLanguageNotNull = language != null;
      return this;
    }

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    @JsonIgnore
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      this.isLanguageNotNull = true;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      additionalProperties.remove("language");

      return new UserDto(language, isLanguageNotNull, additionalProperties);
    }
  }

}
]


pojoWithRequiredAdditionalProperties=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.EmailValidator;
import com.github.muehmar.openapi.util.NullableAdditionalProperty;
import com.github.muehmar.openapi.util.Tristate;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final String email;
  private final LocalDate birthdate;
  private final boolean isBirthdateNotNull;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      String email,
      LocalDate birthdate,
      boolean isBirthdateNotNull,
      Map<String, Object> additionalProperties
    ) {
    this.email = email;
    this.birthdate = birthdate;
    this.isBirthdateNotNull = isBirthdateNotNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * email
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Birthdate
   */
  @JsonIgnore
  public Optional<LocalDate> getBirthdate() {
    return Optional.ofNullable(birthdate);
  }

  /**
   * Birthdate
   */
  @JsonIgnore
  public LocalDate getBirthdateOr(LocalDate defaultValue) {
    return this.birthdate == null ? defaultValue : this.birthdate;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LocalDate getBirthdateRaw() {
    return birthdate;
  }

  @AssertTrue(message = "birthdate is required to be non-null but is null")
  @JsonIgnore
  private boolean isBirthdateNotNull() {
    return isBirthdateNotNull;
  }

  @JsonIgnore
  public String getName() {
    try {
      return (String) additionalProperties.get("name");
    }
    catch (ClassCastException e) {
      return null;
    }
  }

  @NotNull
  private Object getNameAsObject() {
    return additionalProperties.get("name");
  }

  @AssertTrue(message = "Value is not an instance of String")
  private boolean isNameCorrectType() {
    Object value = additionalProperties.get("name");
    return value == null || value instanceof String;
  }

  @Valid
  @JsonAnyGetter
  private Map<String, Object> getAdditionalProperties_() {
    return additionalProperties;
  }

  @JsonIgnore
  public List<NullableAdditionalProperty<Object>> getAdditionalProperties() {
    return additionalProperties.entrySet().stream()
        .map(entry -> NullableAdditionalProperty.ofNullable(entry.getKey(), entry.getValue()))
        .collect(Collectors.toList());
  }

  /**
   * Returns the additional property with {@code key} where the {@link Tristate}
   * class represents the possible three states of the property: present and
   * non-null, present and null, absent.
   */
  public Tristate<Object> getAdditionalProperty(String key) {
    if (additionalProperties.containsKey(key)) {
      return Optional.ofNullable(additionalProperties.get(key))
          .map(Tristate::ofValue)
          .orElseGet(Tristate::ofNull);
    } else {
      return Tristate.ofAbsent();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (email != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * email
   */
  public ObjectPojo1Dto withEmail(String email) {
    return new ObjectPojo1Dto(email, birthdate, isBirthdateNotNull, additionalProperties);
  }

  /**
   * Birthdate
   */
  public ObjectPojo1Dto withBirthdate(LocalDate birthdate) {
    return new ObjectPojo1Dto(email, birthdate, isBirthdateNotNull, additionalProperties);
  }

  /**
   * Birthdate
   */
  public ObjectPojo1Dto withBirthdate(Optional<LocalDate> birthdate) {
    return new ObjectPojo1Dto(email, birthdate.orElse(null), isBirthdateNotNull, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isBirthdateValid() {
      return isBirthdateNotNull;
    }

    private boolean isNameValid() {
      return getName() != null;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties_() != null) {
        return getAdditionalProperties_().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isEmailValid()
          && isBirthdateValid()
          && isNameValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.isBirthdateNotNull, other.isBirthdateNotNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      email,
      birthdate,
      isBirthdateNotNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "email=" + "'" + email + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "isBirthdateNotNull=" + isBirthdateNotNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String email;
    private LocalDate birthdate;
    private boolean isBirthdateNotNull = true;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * email
     */
    @JsonProperty("email")
    private Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    public Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      this.isBirthdateNotNull = birthdate != null;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonIgnore
    public Builder setBirthdate(Optional<LocalDate> birthdate) {
      this.birthdate = birthdate.orElse(null);
      this.isBirthdateNotNull = true;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, Tristate<Object> value) {
      value
          .onValue(val -> this.additionalProperties.put(key, val))
          .onNull(() -> this.additionalProperties.put(key, null))
          .onAbsent(() -> null);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    private Builder setName(String name) {
      return addAdditionalProperty("name", name);
    }

    public ObjectPojo1Dto build() {
      additionalProperties.remove("email");
      additionalProperties.remove("birthdate");

      return new ObjectPojo1Dto(email, birthdate, isBirthdateNotNull, additionalProperties);
    }
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new BuilderStages.FullPropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 builder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  /**
   * Instantiates a new staged builder. Explicit properties have precedence over
   * additional properties, i.e. an additional property with the same name as an
   * explicit property will be discarded.
   */
  public static BuilderStages.PropertyBuilder0 objectPojo1DtoBuilder() {
    return new BuilderStages.PropertyBuilder0(new Builder());
  }

  public static final class BuilderStages {
    private BuilderStages() {}

    public static final class FullPropertyBuilder0 {
      private final Builder builder;

      private FullPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * email
       */
      public FullPropertyBuilder1 setEmail(String email) {
        return new FullPropertyBuilder1(builder.setEmail(email));
      }

    }

    public static final class FullPropertyBuilder1 {
      private final Builder builder;

      private FullPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Additional Property 'name'
       */
      public FullOptPropertyBuilder0 setName(String name) {
        return new FullOptPropertyBuilder0(builder.setName(name));
      }

    }

    public static final class FullOptPropertyBuilder0 {
      private final Builder builder;

      private FullOptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Birthdate
       */
      public FullOptPropertyBuilder1 setBirthdate(LocalDate birthdate) {
        return new FullOptPropertyBuilder1(builder.setBirthdate(birthdate));
      }

      /**
       * Birthdate
       */
      public FullOptPropertyBuilder1 setBirthdate(Optional<LocalDate> birthdate) {
        return new FullOptPropertyBuilder1(builder.setBirthdate(birthdate));
      }

    }

    public static final class FullOptPropertyBuilder1 {
      private final Builder builder;

      private FullOptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public FullOptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
        return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder1 addAdditionalProperty(String key, Tristate<Object> value) {
        return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public FullOptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new FullOptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class PropertyBuilder0 {
      private final Builder builder;

      private PropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * email
       */
      public PropertyBuilder1 setEmail(String email) {
        return new PropertyBuilder1(builder.setEmail(email));
      }

    }

    public static final class PropertyBuilder1 {
      private final Builder builder;

      private PropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      /**
       * Additional Property 'name'
       */
      public PropertyBuilder2 setName(String name) {
        return new PropertyBuilder2(builder.setName(name));
      }

    }

    public static final class PropertyBuilder2 {
      private final Builder builder;

      private PropertyBuilder2(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder0 andAllOptionals(){
        return new OptPropertyBuilder0(builder);
      }

      public Builder andOptionals(){
        return builder;
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }

    public static final class OptPropertyBuilder0 {
      private final Builder builder;

      private OptPropertyBuilder0(Builder builder) {
        this.builder = builder;
      }

      /**
       * Birthdate
       */
      public OptPropertyBuilder1 setBirthdate(LocalDate birthdate) {
        return new OptPropertyBuilder1(builder.setBirthdate(birthdate));
      }

      /**
       * Birthdate
       */
      public OptPropertyBuilder1 setBirthdate(Optional<LocalDate> birthdate) {
        return new OptPropertyBuilder1(builder.setBirthdate(birthdate));
      }

    }

    public static final class OptPropertyBuilder1 {
      private final Builder builder;

      private OptPropertyBuilder1(Builder builder) {
        this.builder = builder;
      }

      public OptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
        return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder1 addAdditionalProperty(String key, Tristate<Object> value) {
        return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
      }

      public OptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
        return new OptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
      }

      public ObjectPojo1Dto build(){
        return builder.build();
      }
    }
  }
}
]