allOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  /**
   * Birthdate
   */
  public LocalDate getBirthdate() {
    return birthdate;
  }

  /**
   * Username
   */
  public String getUsername() {
    return username;
  }

  @JsonIgnore
  @Valid
  public AdminDto getAdminDto() {
    return asAdminDto();
  }

  @JsonIgnore
  @Valid
  public UserDto getUserDto() {
    return asUserDto();
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && asAdminDto().isValid()
          && asUserDto().isValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  public static FullAllOfBuilderAdmin0 fullBuilder() {
    return new FullAllOfBuilderAdmin0(new Builder());
  }

  public static FullAllOfBuilderAdmin0 fullPersonDtoBuilder() {
    return new FullAllOfBuilderAdmin0(new Builder());
  }

  public static final class FullAllOfBuilderAdmin0 {
    private final Builder builder;

    private FullAllOfBuilderAdmin0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Birthdate
     */
    public FullAllOfBuilderUser0 setBirthdate(LocalDate birthdate) {
      return new FullAllOfBuilderUser0(builder.setBirthdate(birthdate));
    }

    public FullAllOfBuilderUser0 setAdminDto(AdminDto dto) {
      return new FullAllOfBuilderUser0(builder.setAdminDto(dto));
    }
  }

  public static final class FullAllOfBuilderUser0 {
    private final Builder builder;

    private FullAllOfBuilderUser0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Username
     */
    public FullPropertyBuilder0 setUsername(String username) {
      return new FullPropertyBuilder0(builder.setUsername(username));
    }

    public FullPropertyBuilder0 setUserDto(UserDto dto) {
      return new FullPropertyBuilder0(builder.setUserDto(dto));
    }
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static AllOfBuilderAdmin0 builder() {
    return new AllOfBuilderAdmin0(new Builder());
  }

  public static AllOfBuilderAdmin0 personDtoBuilder() {
    return new AllOfBuilderAdmin0(new Builder());
  }

  public static final class AllOfBuilderAdmin0 {
    private final Builder builder;

    private AllOfBuilderAdmin0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Birthdate
     */
    public AllOfBuilderUser0 setBirthdate(LocalDate birthdate) {
      return new AllOfBuilderUser0(builder.setBirthdate(birthdate));
    }

    public AllOfBuilderUser0 setAdminDto(AdminDto dto) {
      return new AllOfBuilderUser0(builder.setAdminDto(dto));
    }
  }

  public static final class AllOfBuilderUser0 {
    private final Builder builder;

    private AllOfBuilderUser0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Username
     */
    public PropertyBuilder0 setUsername(String username) {
      return new PropertyBuilder0(builder.setUsername(username));
    }

    public PropertyBuilder0 setUserDto(UserDto dto) {
      return new PropertyBuilder0(builder.setUserDto(dto));
    }
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }
}
]


anyOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import javax.validation.Valid;
import javax.validation.constraints.AssertFalse;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  LocalDate getBirthdate() {
    return birthdate;
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  String getUsername() {
    return username;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns {@link AdminDto} of the anyOf composition in case it is valid against
   * the schema Admin wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<AdminDto> getAdminDto() {
    return this.<Optional<AdminDto>>foldAnyOf(Optional::of, ignore -> Optional.empty()).stream().findFirst().flatMap(Function.identity());
  }

  /**
   * Returns {@link UserDto} of the anyOf composition in case it is valid against the
   * schema User wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<UserDto> getUserDto() {
    return this.<Optional<UserDto>>foldAnyOf(ignore -> Optional.empty(), Optional::of).stream().findFirst().flatMap(Function.identity());
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Folds the anyOf part of this instance using the given mapping functions for the
   * DTO's. All mapping functions gets executed with its corresponding DTO as input
   * if this instance is valid against the corresponding schema and the results are
   * returned in a list. The order of the elements in the returned list is
   * deterministic: The order corresponds to the order of the mapping function
   * arguments, i.e. the result of the first mapping function will always be at the
   * first position in the list (if the function gets executed).<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * This method assumes this instance is either manually or automatically validated,
   * i.e. the JSON is valid against at least one of the anyOf schemas. If it is valid
   * against no schema, it will simply return an empty list.
   */
  public <T> List<T> foldAnyOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto) {
    final List<T> result = new ArrayList<>();
    if (isValidAgainstAdminDto()) {
      result.add(onAdminDto.apply(asAdminDto()));
    }
    if (isValidAgainstUserDto()) {
      result.add(onUserDto.apply(asUserDto()));
    }
    return result;
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  @Valid
  @JsonIgnore
  private List<Object> getInvalidCompositionDtos() {
    final List<Object> dtos = new ArrayList<>();
    if(getAnyOfValidCount() == 0) {
      dtos.add(asAdminDto());
      dtos.add(asUserDto());
    }
    return dtos;
  }

  private boolean isValidAgainstAdminDto() {
    return asAdminDto().isValid();
  }

  private boolean isValidAgainstUserDto() {
    return asUserDto().isValid();
  }

  private int getAnyOfValidCount() {
    return
      (isValidAgainstAdminDto() ? 1 : 0) +
      (isValidAgainstUserDto() ? 1 : 0);
  }

  @AssertFalse(message = "Is not valid against one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstNoAnyOfSchema() {
    return getAnyOfValidCount() == 0;
  }

  @Valid
  @JsonIgnore
  private List<Object> getAnyOf() {
    if (getAnyOfValidCount() == 0) {
      return null;
    }
    return foldAnyOf(dto -> dto, dto -> dto);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && getAnyOfValidCount() >= 1
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  public static FullAnyOfBuilder0 fullBuilder() {
    return new FullAnyOfBuilder0(new Builder());
  }

  public static FullAnyOfBuilder0 fullPersonDtoBuilder() {
    return new FullAnyOfBuilder0(new Builder());
  }

  public static final class FullAnyOfBuilder0 {
    private final Builder builder;

    private FullAnyOfBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullAnyOfBuilder1 setAdminDto(AdminDto dto) {
      return new FullAnyOfBuilder1(builder.setAdminDto(dto));
    }

    public FullAnyOfBuilder1 setUserDto(UserDto dto) {
      return new FullAnyOfBuilder1(builder.setUserDto(dto));
    }

    public FullAnyOfBuilder2 setAnyOfContainer(PersonAnyOfContainerDto container) {
      if (container.getAdminDto() != null) {
        builder.setAdminDto(container.getAdminDto());
      }

      if (container.getUserDto() != null) {
        builder.setUserDto(container.getUserDto());
      }
      return new FullAnyOfBuilder2(builder);
    }
  }

  public static final class FullAnyOfBuilder1 {
    private final Builder builder;

    private FullAnyOfBuilder1(Builder builder) {
      this.builder = builder;
    }

    public FullAnyOfBuilder1 setAdminDto(AdminDto dto) {
      return new FullAnyOfBuilder1(builder.setAdminDto(dto));
    }

    public FullAnyOfBuilder1 setUserDto(UserDto dto) {
      return new FullAnyOfBuilder1(builder.setUserDto(dto));
    }

    /**
     * RequiredStringVal
     */
    public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullAnyOfBuilder2 {
    private final Builder builder;

    private FullAnyOfBuilder2(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static AnyOfBuilder0 builder() {
    return new AnyOfBuilder0(new Builder());
  }

  public static AnyOfBuilder0 personDtoBuilder() {
    return new AnyOfBuilder0(new Builder());
  }

  public static final class AnyOfBuilder0 {
    private final Builder builder;

    private AnyOfBuilder0(Builder builder) {
      this.builder = builder;
    }

    public AnyOfBuilder1 setAdminDto(AdminDto dto) {
      return new AnyOfBuilder1(builder.setAdminDto(dto));
    }

    public AnyOfBuilder1 setUserDto(UserDto dto) {
      return new AnyOfBuilder1(builder.setUserDto(dto));
    }

    public AnyOfBuilder2 setAnyOfContainer(PersonAnyOfContainerDto container) {
      if (container.getAdminDto() != null) {
        builder.setAdminDto(container.getAdminDto());
      }

      if (container.getUserDto() != null) {
        builder.setUserDto(container.getUserDto());
      }
      return new AnyOfBuilder2(builder);
    }
  }

  public static final class AnyOfBuilder1 {
    private final Builder builder;

    private AnyOfBuilder1(Builder builder) {
      this.builder = builder;
    }

    public AnyOfBuilder1 setAdminDto(AdminDto dto) {
      return new AnyOfBuilder1(builder.setAdminDto(dto));
    }

    public AnyOfBuilder1 setUserDto(UserDto dto) {
      return new AnyOfBuilder1(builder.setUserDto(dto));
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class AnyOfBuilder2 {
    private final Builder builder;

    private AnyOfBuilder2(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }
}
]


anyTypeMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, Object> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


enableValidation[jakarta-2]=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.EmailValidator;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

/**
 * User of the Application
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final String lastName;
  private final String nickName;
  private final String email;
  private final Double height;
  private final Long level;
  private final String uppercase;
  private final Long multipleOfValue;
  private final AnotherPojo anotherPojo;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      String lastName,
      String nickName,
      String email,
      Double height,
      Long level,
      String uppercase,
      Long multipleOfValue,
      AnotherPojo anotherPojo,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.lastName = lastName;
    this.nickName = nickName;
    this.email = email;
    this.height = height;
    this.level = level;
    this.uppercase = uppercase;
    this.multipleOfValue = multipleOfValue;
    this.anotherPojo = anotherPojo;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * ID of this user
   */
  @NotNull
  @Max(value = 50)
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  @NotNull
  @Size(min = 10, max = 15)
  public String getName() {
    return name;
  }

  /**
   * Lastname of this user
   */
  @NotNull
  @Size(min = 10)
  public String getLastName() {
    return lastName;
  }

  /**
   * Nickname of this user
   */
  @NotNull
  @Size(max = 50)
  public String getNickName() {
    return nickName;
  }

  /**
   * Email of this user
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Height of this user
   */
  @NotNull
  @DecimalMin(value = "120.0", inclusive = true)
  @DecimalMax(value = "199", inclusive = false)
  public Double getHeight() {
    return height;
  }

  /**
   * Level of this user
   */
  public Optional<Long> getLevel() {
    return Optional.ofNullable(level);
  }

  /**
   * Level of this user
   */
  public Long getLevelOr(Long defaultValue) {
    return this.level == null ? defaultValue : this.level;
  }

  @Min(value = 5)
  private Long getLevelRaw() {
    return level;
  }

  /**
   * Something uppercase
   */
  public Optional<String> getUppercase() {
    return Optional.ofNullable(uppercase);
  }

  /**
   * Something uppercase
   */
  public String getUppercaseOr(String defaultValue) {
    return this.uppercase == null ? defaultValue : this.uppercase;
  }

  @Pattern(regexp="^(\\d[A-Z]*)")
  private String getUppercaseRaw() {
    return uppercase;
  }

  /**
   * Multiple of value
   */
  public Optional<Long> getMultipleOfValue() {
    return Optional.ofNullable(multipleOfValue);
  }

  /**
   * Multiple of value
   */
  public Long getMultipleOfValueOr(Long defaultValue) {
    return this.multipleOfValue == null ? defaultValue : this.multipleOfValue;
  }

  private Long getMultipleOfValueRaw() {
    return multipleOfValue;
  }

  /**
   * Another Pojo
   */
  public Optional<AnotherPojo> getAnotherPojo() {
    return Optional.ofNullable(anotherPojo);
  }

  /**
   * Another Pojo
   */
  public AnotherPojo getAnotherPojoOr(AnotherPojo defaultValue) {
    return this.anotherPojo == null ? defaultValue : this.anotherPojo;
  }

  @Valid
  private AnotherPojo getAnotherPojoRaw() {
    return anotherPojo;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @Min(5)
  @Max(15)
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (lastName != null ? 1 : 0) +
      (nickName != null ? 1 : 0) +
      (email != null ? 1 : 0) +
      (height != null ? 1 : 0) +
      (level != null ? 1 : 0) +
      (uppercase != null ? 1 : 0) +
      (multipleOfValue != null ? 1 : 0) +
      (anotherPojo != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Lastname of this user
   */
  public UserDto withLastName(String lastName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Nickname of this user
   */
  public UserDto withNickName(String nickName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Email of this user
   */
  public UserDto withEmail(String email) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Height of this user
   */
  public UserDto withHeight(Double height) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Long level) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Optional<Long> level) {
    return new UserDto(id, name, lastName, nickName, email, height, level.orElse(null), uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(String uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(Optional<String> uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase.orElse(null), multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Long multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Optional<Long> multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue.orElse(null), anotherPojo, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(AnotherPojo anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(Optional<AnotherPojo> anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      if(id != null) {
        return id <= 50;
      }

      return false;
    }

    private boolean isNameValid() {
      if(name != null) {
        return 10 <= name.length()
            && name.length() <= 15;
      }

      return false;
    }

    private boolean isLastNameValid() {
      if(lastName != null) {
        return 10 <= lastName.length();
      }

      return false;
    }

    private boolean isNickNameValid() {
      if(nickName != null) {
        return nickName.length() <= 50;
      }

      return false;
    }

    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isHeightValid() {
      if(height != null) {
        return 0 <= BigDecimal.valueOf(height).compareTo(new BigDecimal("120.0"))
            && BigDecimal.valueOf(height).compareTo(new BigDecimal("199")) < 0;
      }

      return false;
    }

    private boolean isLevelValid() {
      if(level != null) {
        return 5 <= level;
      }

      return true;
    }

    private boolean isUppercaseValid() {
      if(uppercase != null) {
        return java.util.regex.Pattern.matches("^(\\d[A-Z]*)", uppercase);
      }

      return true;
    }

    private boolean isMultipleOfValueValid() {
      if(multipleOfValue != null) {
        return isMultipleOfValueMultipleOfValid();
      }

      return true;
    }

    private boolean isAnotherPojoValid() {
      if(anotherPojo != null) {
        return anotherPojo.isValid();
      }

      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLastNameValid()
          && isNickNameValid()
          && isEmailValid()
          && isHeightValid()
          && isLevelValid()
          && isUppercaseValid()
          && isMultipleOfValueValid()
          && isAnotherPojoValid()
          && 5 <= getPropertyCount()
          && getPropertyCount() <= 15
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "multipleOfValue is not a multiple of 5")
  private boolean isMultipleOfValueMultipleOfValid() {
    return multipleOfValue == null || multipleOfValue % 5L == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.lastName, other.lastName)
        && Objects.deepEquals(this.nickName, other.nickName)
        && Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.height, other.height)
        && Objects.deepEquals(this.level, other.level)
        && Objects.deepEquals(this.uppercase, other.uppercase)
        && Objects.deepEquals(this.multipleOfValue, other.multipleOfValue)
        && Objects.deepEquals(this.anotherPojo, other.anotherPojo)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      lastName,
      nickName,
      email,
      height,
      level,
      uppercase,
      multipleOfValue,
      anotherPojo,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "lastName=" + "'" + lastName + "'" + ", " +
      "nickName=" + "'" + nickName + "'" + ", " +
      "email=" + "'" + email + "'" + ", " +
      "height=" + height + ", " +
      "level=" + level + ", " +
      "uppercase=" + "'" + uppercase + "'" + ", " +
      "multipleOfValue=" + multipleOfValue + ", " +
      "anotherPojo=" + anotherPojo + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private String lastName;
    private String nickName;
    private String email;
    private Double height;
    private Long level;
    private String uppercase;
    private Long multipleOfValue;
    private AnotherPojo anotherPojo;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Lastname of this user
     */
    public Builder setLastName(String lastName) {
      this.lastName = lastName;
      return this;
    }

    /**
     * Nickname of this user
     */
    public Builder setNickName(String nickName) {
      this.nickName = nickName;
      return this;
    }

    /**
     * Email of this user
     */
    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Height of this user
     */
    public Builder setHeight(Double height) {
      this.height = height;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Long level) {
      this.level = level;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Optional<Long> level) {
      this.level = level.orElse(null);
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(String uppercase) {
      this.uppercase = uppercase;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(Optional<String> uppercase) {
      this.uppercase = uppercase.orElse(null);
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Long multipleOfValue) {
      this.multipleOfValue = multipleOfValue;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Optional<Long> multipleOfValue) {
      this.multipleOfValue = multipleOfValue.orElse(null);
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(AnotherPojo anotherPojo) {
      this.anotherPojo = anotherPojo;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(Optional<AnotherPojo> anotherPojo) {
      this.anotherPojo = anotherPojo.orElse(null);
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
    }
  }

}
]


enableValidation[jakarta-3]=[
package com.github.muehmar;

import com.github.muehmar.openapi.util.EmailValidator;
import jakarta.validation.Valid;
import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * User of the Application
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final String lastName;
  private final String nickName;
  private final String email;
  private final Double height;
  private final Long level;
  private final String uppercase;
  private final Long multipleOfValue;
  private final AnotherPojo anotherPojo;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      String lastName,
      String nickName,
      String email,
      Double height,
      Long level,
      String uppercase,
      Long multipleOfValue,
      AnotherPojo anotherPojo,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.lastName = lastName;
    this.nickName = nickName;
    this.email = email;
    this.height = height;
    this.level = level;
    this.uppercase = uppercase;
    this.multipleOfValue = multipleOfValue;
    this.anotherPojo = anotherPojo;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * ID of this user
   */
  @NotNull
  @Max(value = 50)
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  @NotNull
  @Size(min = 10, max = 15)
  public String getName() {
    return name;
  }

  /**
   * Lastname of this user
   */
  @NotNull
  @Size(min = 10)
  public String getLastName() {
    return lastName;
  }

  /**
   * Nickname of this user
   */
  @NotNull
  @Size(max = 50)
  public String getNickName() {
    return nickName;
  }

  /**
   * Email of this user
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Height of this user
   */
  @NotNull
  @DecimalMin(value = "120.0", inclusive = true)
  @DecimalMax(value = "199", inclusive = false)
  public Double getHeight() {
    return height;
  }

  /**
   * Level of this user
   */
  public Optional<Long> getLevel() {
    return Optional.ofNullable(level);
  }

  /**
   * Level of this user
   */
  public Long getLevelOr(Long defaultValue) {
    return this.level == null ? defaultValue : this.level;
  }

  @Min(value = 5)
  private Long getLevelRaw() {
    return level;
  }

  /**
   * Something uppercase
   */
  public Optional<String> getUppercase() {
    return Optional.ofNullable(uppercase);
  }

  /**
   * Something uppercase
   */
  public String getUppercaseOr(String defaultValue) {
    return this.uppercase == null ? defaultValue : this.uppercase;
  }

  @Pattern(regexp="^(\\d[A-Z]*)")
  private String getUppercaseRaw() {
    return uppercase;
  }

  /**
   * Multiple of value
   */
  public Optional<Long> getMultipleOfValue() {
    return Optional.ofNullable(multipleOfValue);
  }

  /**
   * Multiple of value
   */
  public Long getMultipleOfValueOr(Long defaultValue) {
    return this.multipleOfValue == null ? defaultValue : this.multipleOfValue;
  }

  private Long getMultipleOfValueRaw() {
    return multipleOfValue;
  }

  /**
   * Another Pojo
   */
  public Optional<AnotherPojo> getAnotherPojo() {
    return Optional.ofNullable(anotherPojo);
  }

  /**
   * Another Pojo
   */
  public AnotherPojo getAnotherPojoOr(AnotherPojo defaultValue) {
    return this.anotherPojo == null ? defaultValue : this.anotherPojo;
  }

  @Valid
  private AnotherPojo getAnotherPojoRaw() {
    return anotherPojo;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @Min(5)
  @Max(15)
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (lastName != null ? 1 : 0) +
      (nickName != null ? 1 : 0) +
      (email != null ? 1 : 0) +
      (height != null ? 1 : 0) +
      (level != null ? 1 : 0) +
      (uppercase != null ? 1 : 0) +
      (multipleOfValue != null ? 1 : 0) +
      (anotherPojo != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Lastname of this user
   */
  public UserDto withLastName(String lastName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Nickname of this user
   */
  public UserDto withNickName(String nickName) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Email of this user
   */
  public UserDto withEmail(String email) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Height of this user
   */
  public UserDto withHeight(Double height) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Long level) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Level of this user
   */
  public UserDto withLevel(Optional<Long> level) {
    return new UserDto(id, name, lastName, nickName, email, height, level.orElse(null), uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(String uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Something uppercase
   */
  public UserDto withUppercase(Optional<String> uppercase) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase.orElse(null), multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Long multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Multiple of value
   */
  public UserDto withMultipleOfValue(Optional<Long> multipleOfValue) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue.orElse(null), anotherPojo, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(AnotherPojo anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
  }

  /**
   * Another Pojo
   */
  public UserDto withAnotherPojo(Optional<AnotherPojo> anotherPojo) {
    return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      if(id != null) {
        return id <= 50;
      }

      return false;
    }

    private boolean isNameValid() {
      if(name != null) {
        return 10 <= name.length()
            && name.length() <= 15;
      }

      return false;
    }

    private boolean isLastNameValid() {
      if(lastName != null) {
        return 10 <= lastName.length();
      }

      return false;
    }

    private boolean isNickNameValid() {
      if(nickName != null) {
        return nickName.length() <= 50;
      }

      return false;
    }

    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isHeightValid() {
      if(height != null) {
        return 0 <= BigDecimal.valueOf(height).compareTo(new BigDecimal("120.0"))
            && BigDecimal.valueOf(height).compareTo(new BigDecimal("199")) < 0;
      }

      return false;
    }

    private boolean isLevelValid() {
      if(level != null) {
        return 5 <= level;
      }

      return true;
    }

    private boolean isUppercaseValid() {
      if(uppercase != null) {
        return java.util.regex.Pattern.matches("^(\\d[A-Z]*)", uppercase);
      }

      return true;
    }

    private boolean isMultipleOfValueValid() {
      if(multipleOfValue != null) {
        return isMultipleOfValueMultipleOfValid();
      }

      return true;
    }

    private boolean isAnotherPojoValid() {
      if(anotherPojo != null) {
        return anotherPojo.isValid();
      }

      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLastNameValid()
          && isNickNameValid()
          && isEmailValid()
          && isHeightValid()
          && isLevelValid()
          && isUppercaseValid()
          && isMultipleOfValueValid()
          && isAnotherPojoValid()
          && 5 <= getPropertyCount()
          && getPropertyCount() <= 15
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "multipleOfValue is not a multiple of 5")
  private boolean isMultipleOfValueMultipleOfValid() {
    return multipleOfValue == null || multipleOfValue % 5L == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.lastName, other.lastName)
        && Objects.deepEquals(this.nickName, other.nickName)
        && Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.height, other.height)
        && Objects.deepEquals(this.level, other.level)
        && Objects.deepEquals(this.uppercase, other.uppercase)
        && Objects.deepEquals(this.multipleOfValue, other.multipleOfValue)
        && Objects.deepEquals(this.anotherPojo, other.anotherPojo)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      lastName,
      nickName,
      email,
      height,
      level,
      uppercase,
      multipleOfValue,
      anotherPojo,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "lastName=" + "'" + lastName + "'" + ", " +
      "nickName=" + "'" + nickName + "'" + ", " +
      "email=" + "'" + email + "'" + ", " +
      "height=" + height + ", " +
      "level=" + level + ", " +
      "uppercase=" + "'" + uppercase + "'" + ", " +
      "multipleOfValue=" + multipleOfValue + ", " +
      "anotherPojo=" + anotherPojo + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private String lastName;
    private String nickName;
    private String email;
    private Double height;
    private Long level;
    private String uppercase;
    private Long multipleOfValue;
    private AnotherPojo anotherPojo;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Lastname of this user
     */
    public Builder setLastName(String lastName) {
      this.lastName = lastName;
      return this;
    }

    /**
     * Nickname of this user
     */
    public Builder setNickName(String nickName) {
      this.nickName = nickName;
      return this;
    }

    /**
     * Email of this user
     */
    public Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Height of this user
     */
    public Builder setHeight(Double height) {
      this.height = height;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Long level) {
      this.level = level;
      return this;
    }

    /**
     * Level of this user
     */
    public Builder setLevel(Optional<Long> level) {
      this.level = level.orElse(null);
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(String uppercase) {
      this.uppercase = uppercase;
      return this;
    }

    /**
     * Something uppercase
     */
    public Builder setUppercase(Optional<String> uppercase) {
      this.uppercase = uppercase.orElse(null);
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Long multipleOfValue) {
      this.multipleOfValue = multipleOfValue;
      return this;
    }

    /**
     * Multiple of value
     */
    public Builder setMultipleOfValue(Optional<Long> multipleOfValue) {
      this.multipleOfValue = multipleOfValue.orElse(null);
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(AnotherPojo anotherPojo) {
      this.anotherPojo = anotherPojo;
      return this;
    }

    /**
     * Another Pojo
     */
    public Builder setAnotherPojo(Optional<AnotherPojo> anotherPojo) {
      this.anotherPojo = anotherPojo.orElse(null);
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(id, name, lastName, nickName, email, height, level, uppercase, multipleOfValue, anotherPojo, additionalProperties);
    }
  }

}
]


enabledSafeBuilder=[
package com.github.muehmar;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static final class Builder {

    private Builder() {
    }

    private Long id;
    private String name;
    private LanguageEnum language;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    private Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    private Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(id, name, language, additionalProperties);
    }
  }

  public static FullPropertyBuilder0 fullBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static FullPropertyBuilder0 fullUserDtoBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * ID of this user
     */
    public FullPropertyBuilder1 setId(Long id) {
      return new FullPropertyBuilder1(builder.setId(id));
    }

  }

  public static final class FullPropertyBuilder1 {
    private final Builder builder;

    private FullPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Name of this user
     */
    public FullOptPropertyBuilder0 setName(String name) {
      return new FullOptPropertyBuilder0(builder.setName(name));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Preferred language of this user
     */
    public FullOptPropertyBuilder1 setLanguage(LanguageEnum language) {
      return new FullOptPropertyBuilder1(builder.setLanguage(language));
    }

    /**
     * Preferred language of this user
     */
    public FullOptPropertyBuilder1 setLanguage(Optional<LanguageEnum> language) {
      return new FullOptPropertyBuilder1(builder.setLanguage(language));
    }

  }

  public static final class FullOptPropertyBuilder1 {
    private final Builder builder;

    private FullOptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
    }

    public UserDto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 userDtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * ID of this user
     */
    public PropertyBuilder1 setId(Long id) {
      return new PropertyBuilder1(builder.setId(id));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Name of this user
     */
    public PropertyBuilder2 setName(String name) {
      return new PropertyBuilder2(builder.setName(name));
    }

  }

  public static final class PropertyBuilder2 {
    private final Builder builder;

    private PropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public UserDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Preferred language of this user
     */
    public OptPropertyBuilder1 setLanguage(LanguageEnum language) {
      return new OptPropertyBuilder1(builder.setLanguage(language));
    }

    /**
     * Preferred language of this user
     */
    public OptPropertyBuilder1 setLanguage(Optional<LanguageEnum> language) {
      return new OptPropertyBuilder1(builder.setLanguage(language));
    }

  }

  public static final class OptPropertyBuilder1 {
    private final Builder builder;

    private OptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
    }

    public UserDto build(){
      return builder.build();
    }
  }
}
]


illegalIdentifierPojo=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = Illegal_IdentifierDto.Builder.class)
public class Illegal_IdentifierDto {
  private final String switch_;
  private final boolean isSwitchNull;
  private final String point_;
  private final boolean isPoint_Null;
  private final Map<String, Object> additionalProperties;

  public Illegal_IdentifierDto(
      String switch_,
      boolean isSwitchNull,
      String point_,
      boolean isPoint_Null,
      Map<String, Object> additionalProperties
    ) {
    this.switch_ = switch_;
    this.isSwitchNull = isSwitchNull;
    this.point_ = point_;
    this.isPoint_Null = isPoint_Null;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Switch
   */
  @JsonIgnore
  public Tristate<String> getSwitch() {
    return Tristate.ofNullableAndNullFlag(switch_, isSwitchNull);
  }

  @JsonProperty("switch")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getSwitchJackson() {
    return isSwitchNull ? new JacksonNullContainer<>(switch_) : switch_;
  }

  private String getSwitchRaw() {
    return switch_;
  }

  /**
   * Point
   */
  @JsonIgnore
  public Tristate<String> getPoint_() {
    return Tristate.ofNullableAndNullFlag(point_, isPoint_Null);
  }

  @JsonProperty("point.")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getPoint_Jackson() {
    return isPoint_Null ? new JacksonNullContainer<>(point_) : point_;
  }

  private String getPoint_Raw() {
    return point_;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      ((isSwitchNull || switch_ != null) ? 1 : 0) +
      ((isPoint_Null || point_ != null) ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Switch
   */
  public Illegal_IdentifierDto withSwitch(String switch_) {
    return new Illegal_IdentifierDto(switch_, false, point_, isPoint_Null, additionalProperties);
  }

  /**
   * Switch
   */
  public Illegal_IdentifierDto withSwitch(Tristate<String> switch_) {
    return new Illegal_IdentifierDto(switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), point_, isPoint_Null, additionalProperties);
  }

  /**
   * Point
   */
  public Illegal_IdentifierDto withPoint_(String point_) {
    return new Illegal_IdentifierDto(switch_, isSwitchNull, point_, false, additionalProperties);
  }

  /**
   * Point
   */
  public Illegal_IdentifierDto withPoint_(Tristate<String> point_) {
    return new Illegal_IdentifierDto(switch_, isSwitchNull, point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isSwitchValid() {
      return true;
    }

    private boolean isPoint_Valid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isSwitchValid()
          && isPoint_Valid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final Illegal_IdentifierDto other = (Illegal_IdentifierDto) obj;
    return Objects.deepEquals(this.switch_, other.switch_)
        && Objects.deepEquals(this.isSwitchNull, other.isSwitchNull)
        && Objects.deepEquals(this.point_, other.point_)
        && Objects.deepEquals(this.isPoint_Null, other.isPoint_Null)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      switch_,
      isSwitchNull,
      point_,
      isPoint_Null,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "Illegal_IdentifierDto{" +
      "switch=" + "'" + switch_ + "'" + ", " +
      "isSwitchNull=" + isSwitchNull + ", " +
      "point.=" + "'" + point_ + "'" + ", " +
      "isPoint.Null=" + isPoint_Null + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String switch_;
    private boolean isSwitchNull = false;
    private String point_;
    private boolean isPoint_Null = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Switch
     */
    @JsonProperty("switch")
    public Builder setSwitch(String switch_) {
      this.switch_ = switch_;
      this.isSwitchNull = switch_ == null;
      return this;
    }

    /**
     * Switch
     */
    public Builder setSwitch(Tristate<String> switch_) {
      this.switch_ = switch_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isSwitchNull = switch_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    /**
     * Point
     */
    @JsonProperty("point.")
    public Builder setPoint_(String point_) {
      this.point_ = point_;
      this.isPoint_Null = point_ == null;
      return this;
    }

    /**
     * Point
     */
    public Builder setPoint_(Tristate<String> point_) {
      this.point_ = point_.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isPoint_Null = point_.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public Illegal_IdentifierDto build() {
      return new Illegal_IdentifierDto(switch_, isSwitchNull, point_, isPoint_Null, additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullIllegal_IdentifierDtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Switch
     */
    public FullOptPropertyBuilder1 setSwitch(String switch_) {
      return new FullOptPropertyBuilder1(builder.setSwitch(switch_));
    }

    /**
     * Switch
     */
    public FullOptPropertyBuilder1 setSwitch(Tristate<String> switch_) {
      return new FullOptPropertyBuilder1(builder.setSwitch(switch_));
    }
  }

  public static final class FullOptPropertyBuilder1 {
    private final Builder builder;

    private FullOptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Point
     */
    public FullOptPropertyBuilder2 setPoint_(String point_) {
      return new FullOptPropertyBuilder2(builder.setPoint_(point_));
    }

    /**
     * Point
     */
    public FullOptPropertyBuilder2 setPoint_(Tristate<String> point_) {
      return new FullOptPropertyBuilder2(builder.setPoint_(point_));
    }
  }

  public static final class FullOptPropertyBuilder2 {
    private final Builder builder;

    private FullOptPropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder2(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
    }

    public Illegal_IdentifierDto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 illegal_IdentifierDtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public Illegal_IdentifierDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Switch
     */
    public OptPropertyBuilder1 setSwitch(String switch_) {
      return new OptPropertyBuilder1(builder.setSwitch(switch_));
    }

    /**
     * Switch
     */
    public OptPropertyBuilder1 setSwitch(Tristate<String> switch_) {
      return new OptPropertyBuilder1(builder.setSwitch(switch_));
    }
  }

  public static final class OptPropertyBuilder1 {
    private final Builder builder;

    private OptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Point
     */
    public OptPropertyBuilder2 setPoint_(String point_) {
      return new OptPropertyBuilder2(builder.setPoint_(point_));
    }

    /**
     * Point
     */
    public OptPropertyBuilder2 setPoint_(Tristate<String> point_) {
      return new OptPropertyBuilder2(builder.setPoint_(point_));
    }
  }

  public static final class OptPropertyBuilder2 {
    private final Builder builder;

    private OptPropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder2(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
    }

    public Illegal_IdentifierDto build(){
      return builder.build();
    }
  }
}
]


inlinedEnumMapObject=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.validation.constraints.AssertTrue;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Additional property enum
   */
  public enum ColorEnum {
    GREEN("green", ""),
    YELLOW("yellow", ""),
    RED("red", "");

    private final String value;
    private final String description;

    ColorEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static ColorEnum fromValue(String value) {
      for (ColorEnum e: ColorEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(ColorEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for ColorEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  public static ObjectPojo1Dto fromProperties(Map<String, ColorEnum> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  public Map<String, ColorEnum> getAdditionalProperties() {
    final Map<String, ColorEnum> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
    return props;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<ColorEnum> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<ColorEnum> castAdditionalProperty(Object property) {
    try {
      return Optional.of((ColorEnum) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(ColorEnum additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of ColorEnum")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return getAdditionalProperties().size() == additionalProperties.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, ColorEnum value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, ColorEnum value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, ColorEnum value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, ColorEnum> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


integerMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.constraints.AssertTrue;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, Integer> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  public Map<String, Integer> getAdditionalProperties() {
    final Map<String, Integer> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
    return props;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Integer> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<Integer> castAdditionalProperty(Object property) {
    try {
      return Optional.of((Integer) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Integer additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of Integer")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return getAdditionalProperties().size() == additionalProperties.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Integer value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Integer> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Integer value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Integer> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Integer value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Integer> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


jsonSupportJackson=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
@JsonDeserialize(builder = UserDto.Builder.class)
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  @JsonIgnore
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  @JsonIgnore
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  @JsonProperty("language")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LanguageEnum getLanguageRaw() {
    return language;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Long id;
    private String name;
    private LanguageEnum language;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    @JsonProperty("id")
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    @JsonProperty("name")
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    @JsonProperty("language")
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(id, name, language, additionalProperties);
    }
  }

}
]


minimalPojoSetting=[
package com.github.muehmar;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application. This description is intentionally longer to see if its
 * wrapped to a new line.
 */
public class UserDto {
  private final Long id;
  private final String name;
  private final LanguageEnum language;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      Long id,
      String name,
      LanguageEnum language,
      Map<String, Object> additionalProperties
    ) {
    this.id = id;
    this.name = name;
    this.language = language;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", ""),
    ENGLISH("ENGLISH", "");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * ID of this user
   */
  public Long getId() {
    return id;
  }

  /**
   * Name of this user
   */
  public String getName() {
    return name;
  }

  /**
   * Preferred language of this user
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (id != null ? 1 : 0) +
      (name != null ? 1 : 0) +
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * ID of this user
   */
  public UserDto withId(Long id) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Name of this user
   */
  public UserDto withName(String name) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(id, name, language, additionalProperties);
  }

  /**
   * Preferred language of this user
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(id, name, language.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isIdValid() {
      return id != null;
    }

    private boolean isNameValid() {
      return name != null;
    }

    private boolean isLanguageValid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isIdValid()
          && isNameValid()
          && isLanguageValid()
          && 2 <= getPropertyCount()
          && getPropertyCount() <= 10
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.id, other.id)
        && Objects.deepEquals(this.name, other.name)
        && Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      id,
      name,
      language,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "id=" + id + ", " +
      "name=" + "'" + name + "'" + ", " +
      "language=" + language + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private Long id;
    private String name;
    private LanguageEnum language;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * ID of this user
     */
    public Builder setId(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Name of this user
     */
    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(id, name, language, additionalProperties);
    }
  }

}
]


necessityAndNullabilityVariants=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.JacksonNullContainer;
import com.github.muehmar.openapi.util.Tristate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * NecessityAndNullability
 */
@JsonDeserialize(builder = NecessityAndNullabilityDto.Builder.class)
public class NecessityAndNullabilityDto {
  private final String requiredStringVal;
  private final String requiredNullableStringVal;
  private final boolean isRequiredNullableStringValPresent;
  private final String optionalStringVal;
  private final String optionalNullableStringVal;
  private final boolean isOptionalNullableStringValNull;
  private final Map<String, Object> additionalProperties;

  public NecessityAndNullabilityDto(
      String requiredStringVal,
      String requiredNullableStringVal,
      boolean isRequiredNullableStringValPresent,
      String optionalStringVal,
      String optionalNullableStringVal,
      boolean isOptionalNullableStringValNull,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.requiredNullableStringVal = requiredNullableStringVal;
    this.isRequiredNullableStringValPresent = isRequiredNullableStringValPresent;
    this.optionalStringVal = optionalStringVal;
    this.optionalNullableStringVal = optionalNullableStringVal;
    this.isOptionalNullableStringValNull = isOptionalNullableStringValNull;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  /**
   * RequiredNullableStringVal
   */
  @JsonIgnore
  public Optional<String> getRequiredNullableStringVal() {
    return Optional.ofNullable(requiredNullableStringVal);
  }

  /**
   * RequiredNullableStringVal
   */
  @JsonIgnore
  public String getRequiredNullableStringValOr(String defaultValue) {
    return this.requiredNullableStringVal == null ? defaultValue : this.requiredNullableStringVal;
  }

  @Pattern(regexp="Hello")
  @JsonProperty("requiredNullableStringVal")
  private String getRequiredNullableStringValRaw() {
    return requiredNullableStringVal;
  }

  @AssertTrue(message = "requiredNullableStringVal is required but it is not present")
  private boolean isRequiredNullableStringValPresent() {
    return isRequiredNullableStringValPresent;
  }

  /**
   * OptionalStringVal
   */
  @JsonIgnore
  public Optional<String> getOptionalStringVal() {
    return Optional.ofNullable(optionalStringVal);
  }

  /**
   * OptionalStringVal
   */
  @JsonIgnore
  public String getOptionalStringValOr(String defaultValue) {
    return this.optionalStringVal == null ? defaultValue : this.optionalStringVal;
  }

  @JsonProperty("optionalStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  @Pattern(regexp="Hello")
  private String getOptionalStringValRaw() {
    return optionalStringVal;
  }

  /**
   * OptionalNullableStringVal
   */
  @JsonIgnore
  public Tristate<String> getOptionalNullableStringVal() {
    return Tristate.ofNullableAndNullFlag(optionalNullableStringVal, isOptionalNullableStringValNull);
  }

  @JsonProperty("optionalNullableStringVal")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private Object getOptionalNullableStringValJackson() {
    return isOptionalNullableStringValNull ? new JacksonNullContainer<>(optionalNullableStringVal) : optionalNullableStringVal;
  }

  @Pattern(regexp="Hello")
  private String getOptionalNullableStringValRaw() {
    return optionalNullableStringVal;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (isRequiredNullableStringValPresent ? 1 : 0) +
      (optionalStringVal != null ? 1 : 0) +
      ((isOptionalNullableStringValNull || optionalNullableStringVal != null) ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public NecessityAndNullabilityDto withRequiredStringVal(String requiredStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
  }

  /**
   * RequiredNullableStringVal
   */
  public NecessityAndNullabilityDto withRequiredNullableStringVal(String requiredNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, true, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
  }

  /**
   * RequiredNullableStringVal
   */
  public NecessityAndNullabilityDto withRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal.orElse(null), requiredNullableStringVal.isPresent(), optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
  }

  /**
   * OptionalStringVal
   */
  public NecessityAndNullabilityDto withOptionalStringVal(String optionalStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
  }

  /**
   * OptionalStringVal
   */
  public NecessityAndNullabilityDto withOptionalStringVal(Optional<String> optionalStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal.orElse(null), optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
  }

  /**
   * OptionalNullableStringVal
   */
  public NecessityAndNullabilityDto withOptionalNullableStringVal(String optionalNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, false, additionalProperties);
  }

  /**
   * OptionalNullableStringVal
   */
  public NecessityAndNullabilityDto withOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
    return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null), optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isRequiredNullableStringValValid() {
      if(requiredNullableStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredNullableStringVal);
      }

      return isRequiredNullableStringValPresent;
    }

    private boolean isOptionalStringValValid() {
      if(optionalStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", optionalStringVal);
      }

      return true;
    }

    private boolean isOptionalNullableStringValValid() {
      if(optionalNullableStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", optionalNullableStringVal);
      }

      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && isRequiredNullableStringValValid()
          && isOptionalStringValValid()
          && isOptionalNullableStringValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final NecessityAndNullabilityDto other = (NecessityAndNullabilityDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.requiredNullableStringVal, other.requiredNullableStringVal)
        && Objects.deepEquals(this.isRequiredNullableStringValPresent, other.isRequiredNullableStringValPresent)
        && Objects.deepEquals(this.optionalStringVal, other.optionalStringVal)
        && Objects.deepEquals(this.optionalNullableStringVal, other.optionalNullableStringVal)
        && Objects.deepEquals(this.isOptionalNullableStringValNull, other.isOptionalNullableStringValNull)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      requiredNullableStringVal,
      isRequiredNullableStringValPresent,
      optionalStringVal,
      optionalNullableStringVal,
      isOptionalNullableStringValNull,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "NecessityAndNullabilityDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "requiredNullableStringVal=" + "'" + requiredNullableStringVal + "'" + ", " +
      "isRequiredNullableStringValPresent=" + isRequiredNullableStringValPresent + ", " +
      "optionalStringVal=" + "'" + optionalStringVal + "'" + ", " +
      "optionalNullableStringVal=" + "'" + optionalNullableStringVal + "'" + ", " +
      "isOptionalNullableStringValNull=" + isOptionalNullableStringValNull + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private String requiredNullableStringVal;
    private boolean isRequiredNullableStringValPresent = false;
    private String optionalStringVal;
    private String optionalNullableStringVal;
    private boolean isOptionalNullableStringValNull = false;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    @JsonProperty("requiredNullableStringVal")
    private Builder setRequiredNullableStringVal(String requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal;
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * RequiredNullableStringVal
     */
    private Builder setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      this.requiredNullableStringVal = requiredNullableStringVal.orElse(null);
      this.isRequiredNullableStringValPresent = true;
      return this;
    }

    /**
     * OptionalStringVal
     */
    @JsonProperty("optionalStringVal")
    public Builder setOptionalStringVal(String optionalStringVal) {
      this.optionalStringVal = optionalStringVal;
      return this;
    }

    /**
     * OptionalStringVal
     */
    public Builder setOptionalStringVal(Optional<String> optionalStringVal) {
      this.optionalStringVal = optionalStringVal.orElse(null);
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    @JsonProperty("optionalNullableStringVal")
    public Builder setOptionalNullableStringVal(String optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal;
      this.isOptionalNullableStringValNull = optionalNullableStringVal == null;
      return this;
    }

    /**
     * OptionalNullableStringVal
     */
    public Builder setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      this.optionalNullableStringVal = optionalNullableStringVal.onValue(val -> val).onNull(() -> null).onAbsent(() -> null);
      this.isOptionalNullableStringValNull = optionalNullableStringVal.onValue(ignore -> false).onNull(() -> true).onAbsent(() -> false);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public NecessityAndNullabilityDto build() {
      return new NecessityAndNullabilityDto(requiredStringVal, requiredNullableStringVal, isRequiredNullableStringValPresent, optionalStringVal, optionalNullableStringVal, isOptionalNullableStringValNull, additionalProperties);
    }
  }

  public static FullPropertyBuilder0 fullBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static FullPropertyBuilder0 fullNecessityAndNullabilityDtoBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public FullPropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new FullPropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullPropertyBuilder1 {
    private final Builder builder;

    private FullPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredNullableStringVal
     */
    public FullOptPropertyBuilder0 setRequiredNullableStringVal(String requiredNullableStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredNullableStringVal(requiredNullableStringVal));
    }

    /**
     * RequiredNullableStringVal
     */
    public FullOptPropertyBuilder0 setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredNullableStringVal(requiredNullableStringVal));
    }
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * OptionalStringVal
     */
    public FullOptPropertyBuilder1 setOptionalStringVal(String optionalStringVal) {
      return new FullOptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
    }

    /**
     * OptionalStringVal
     */
    public FullOptPropertyBuilder1 setOptionalStringVal(Optional<String> optionalStringVal) {
      return new FullOptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
    }

  }

  public static final class FullOptPropertyBuilder1 {
    private final Builder builder;

    private FullOptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * OptionalNullableStringVal
     */
    public FullOptPropertyBuilder2 setOptionalNullableStringVal(String optionalNullableStringVal) {
      return new FullOptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
    }

    /**
     * OptionalNullableStringVal
     */
    public FullOptPropertyBuilder2 setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      return new FullOptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
    }
  }

  public static final class FullOptPropertyBuilder2 {
    private final Builder builder;

    private FullOptPropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder2(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
    }

    public NecessityAndNullabilityDto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 necessityAndNullabilityDtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredNullableStringVal
     */
    public PropertyBuilder2 setRequiredNullableStringVal(String requiredNullableStringVal) {
      return new PropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
    }

    /**
     * RequiredNullableStringVal
     */
    public PropertyBuilder2 setRequiredNullableStringVal(Optional<String> requiredNullableStringVal) {
      return new PropertyBuilder2(builder.setRequiredNullableStringVal(requiredNullableStringVal));
    }
  }

  public static final class PropertyBuilder2 {
    private final Builder builder;

    private PropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public NecessityAndNullabilityDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * OptionalStringVal
     */
    public OptPropertyBuilder1 setOptionalStringVal(String optionalStringVal) {
      return new OptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
    }

    /**
     * OptionalStringVal
     */
    public OptPropertyBuilder1 setOptionalStringVal(Optional<String> optionalStringVal) {
      return new OptPropertyBuilder1(builder.setOptionalStringVal(optionalStringVal));
    }

  }

  public static final class OptPropertyBuilder1 {
    private final Builder builder;

    private OptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * OptionalNullableStringVal
     */
    public OptPropertyBuilder2 setOptionalNullableStringVal(String optionalNullableStringVal) {
      return new OptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
    }

    /**
     * OptionalNullableStringVal
     */
    public OptPropertyBuilder2 setOptionalNullableStringVal(Tristate<String> optionalNullableStringVal) {
      return new OptPropertyBuilder2(builder.setOptionalNullableStringVal(optionalNullableStringVal));
    }
  }

  public static final class OptPropertyBuilder2 {
    private final Builder builder;

    private OptPropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder2 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder2(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder2 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder2(builder.setAdditionalProperties(additionalProperties));
    }

    public NecessityAndNullabilityDto build(){
      return builder.build();
    }
  }
}
]


noAdditionalPropertiesAllowed=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import javax.validation.constraints.AssertTrue;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isValid() {
      return additionalProperties.isEmpty();
    }
  }

  @AssertTrue(message = "No additional properties allowed")
  private boolean hasNoAdditionalProperties() {
    return additionalProperties.size() == 0;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    @JsonAnySetter
    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


objectMap=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  public Map<String, @Valid HelloDto> getAdditionalProperties() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
    return props;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return true;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @JsonIgnore
  @AssertTrue(message = "Not all additional properties are instances of HelloDto")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return getAdditionalProperties().size() == additionalProperties.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


objectMapDisabledValidation=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  @JsonAnyGetter
  public Map<String, HelloDto> getAdditionalProperties() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
    return props;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return true;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


objectMapNoJsonSupport=[
package com.github.muehmar;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;

public class ObjectPojo1Dto {
  private final Map<String, Object> additionalProperties;

  ObjectPojo1Dto(
      Map<String, Object> additionalProperties
    ) {
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  public static ObjectPojo1Dto fromProperties(Map<String, HelloDto> properties) {
    return new ObjectPojo1Dto(new HashMap<>(properties));
  }

  public Map<String, @Valid HelloDto> getAdditionalProperties() {
    final Map<String, HelloDto> props = new HashMap<>();
    additionalProperties.forEach(
        (key, value) -> castAdditionalProperty(value).ifPresent(v -> props.put(key, v)));
    return props;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<HelloDto> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key))
        .flatMap(this::castAdditionalProperty);
  }

  private Optional<HelloDto> castAdditionalProperty(Object property) {
    try {
      return Optional.of((HelloDto) property);
    } catch (ClassCastException e) {
      return Optional.empty();
    }
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      additionalProperties.size();
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(HelloDto additionalPropertiesValue) {
      if(additionalPropertiesValue != null) {
        return additionalPropertiesValue.isValid();
      }

      return true;
    }

    private boolean isValid() {
      return isAllAdditionalPropertiesHaveCorrectType()
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "Not all additional properties are instances of HelloDto")
  private boolean isAllAdditionalPropertiesHaveCorrectType() {
    return getAdditionalProperties().size() == additionalProperties.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static final class Builder {

    private Builder() {
    }

    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder addAdditionalProperty(String key, HelloDto value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(additionalProperties);
    }
  }

  public static FullOptPropertyBuilder0 fullBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static FullOptPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullOptPropertyBuilder0(new Builder());
  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static OptPropertyBuilder0 builder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static OptPropertyBuilder0 objectPojo1DtoBuilder() {
    return new OptPropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, HelloDto value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, HelloDto> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


objectWithArrayWithUniqueItems=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final List<String> listVal;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      List<String> listVal,
      Map<String, Object> additionalProperties
    ) {
    this.listVal = listVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * List
   */
  @NotNull
  public List<String> getListVal() {
    return listVal;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (listVal != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * List
   */
  public ObjectPojo1Dto withListVal(List<String> listVal) {
    return new ObjectPojo1Dto(listVal, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isListValValid() {
      if(listVal != null) {
        return hasListValUniqueItems()
            && listVal.stream().allMatch(this::isListValValueValid);
      }

      return false;
    }

    private boolean isListValValueValid(String listValValue) {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isListValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @AssertTrue(message = "listVal does not contain unique items")
  private boolean hasListValUniqueItems() {
    return new HashSet<>(listVal).size() == listVal.size();
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.listVal, other.listVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      listVal,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "listVal=" + listVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private List<String> listVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * List
     */
    @JsonProperty("listVal")
    private Builder setListVal(List<String> listVal) {
      this.listVal = listVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(listVal, additionalProperties);
    }
  }

  public static FullPropertyBuilder0 fullBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * List
     */
    public FullOptPropertyBuilder0 setListVal(List<String> listVal) {
      return new FullOptPropertyBuilder0(builder.setListVal(listVal));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 objectPojo1DtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * List
     */
    public PropertyBuilder1 setListVal(List<String> listVal) {
      return new PropertyBuilder1(builder.setListVal(listVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


objectWithMapMember=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final Map<String, UUID> mapVal;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      Map<String, UUID> mapVal,
      Map<String, Object> additionalProperties
    ) {
    this.mapVal = mapVal;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Map
   */
  @NotNull
  @Size(min = 3, max = 8)
  public Map<String, UUID> getMapVal() {
    return mapVal;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (mapVal != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Map
   */
  public ObjectPojo1Dto withMapVal(Map<String, UUID> mapVal) {
    return new ObjectPojo1Dto(mapVal, additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isMapValValid() {
      if(mapVal != null) {
        return 3 <= mapVal.size()
            && mapVal.size() <= 8
            && mapVal.values().stream().allMatch(this::isMapValValueValid);
      }

      return false;
    }

    private boolean isMapValValueValid(UUID mapValValue) {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isMapValValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.mapVal, other.mapVal)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      mapVal,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "mapVal=" + mapVal + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private Map<String, UUID> mapVal;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Map
     */
    @JsonProperty("mapVal")
    private Builder setMapVal(Map<String, UUID> mapVal) {
      this.mapVal = mapVal;
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(mapVal, additionalProperties);
    }
  }

  public static FullPropertyBuilder0 fullBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Map
     */
    public FullOptPropertyBuilder0 setMapVal(Map<String, UUID> mapVal) {
      return new FullOptPropertyBuilder0(builder.setMapVal(mapVal));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 objectPojo1DtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Map
     */
    public PropertyBuilder1 setMapVal(Map<String, UUID> mapVal) {
      return new PropertyBuilder1(builder.setMapVal(mapVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]


oneOfComposition=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;
import javax.validation.Valid;
import javax.validation.constraints.AssertFalse;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * person
 */
@JsonDeserialize(builder = PersonDto.Builder.class)
public class PersonDto {
  private final String requiredStringVal;
  private final LocalDate birthdate;
  private final String username;
  private final Map<String, Object> additionalProperties;

  public PersonDto(
      String requiredStringVal,
      LocalDate birthdate,
      String username,
      Map<String, Object> additionalProperties
    ) {
    this.requiredStringVal = requiredStringVal;
    this.birthdate = birthdate;
    this.username = username;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * RequiredStringVal
   */
  @NotNull
  @Pattern(regexp="Hello")
  public String getRequiredStringVal() {
    return requiredStringVal;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  LocalDate getBirthdate() {
    return birthdate;
  }

  @JsonProperty("username")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  String getUsername() {
    return username;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns {@link AdminDto} of the oneOf composition in case it is valid against
   * the schema Admin wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<AdminDto> getAdminDto() {
    return foldOneOf(Optional::of, ignore -> Optional.empty(), Optional::empty);
  }

  /**
   * Returns {@link UserDto} of the oneOf composition in case it is valid against the
   * schema User wrapped in an {@link Optional}, empty otherwise.
   */
  @JsonIgnore
  public Optional<UserDto> getUserDto() {
    return foldOneOf(ignore -> Optional.empty(), Optional::of, Optional::empty);
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (requiredStringVal != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      (username != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * RequiredStringVal
   */
  public PersonDto withRequiredStringVal(String requiredStringVal) {
    return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
  }

  /**
   * Folds the oneOf part of this instance using the given mapping functions for the
   * DTO's. If this instance is valid against exactly one of the specified schemas,
   * its corresponding mapping function gets executed with the DTO as input and its
   * result is returned.<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * Unlike {@link PersonDto#foldOneOf(Function, Function)}, this method accepts as
   * last parameter a {@link Supplier} which gets called in case this instance is not
   * valid against exactly one of the defined oneOf schemas and its value is
   * returned.
   */
  public <T> T foldOneOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto, Supplier<T> onInvalid) {
    if (isValidAgainstAdminDto()) {
      return onAdminDto.apply(asAdminDto());
    }
    else if (isValidAgainstUserDto()) {
      return onUserDto.apply(asUserDto());
    }
    else {
      return onInvalid.get();
    }
  }

  /**
   * Folds the oneOf part of this instance using the given mapping functions for the
   * DTO's. If this instance is valid against exactly one of the specified schemas,
   * its corresponding mapping function gets executed with the DTO as input and its
   * result is returned.<br>
   * <br>
   * I.e. if the JSON was valid against the schema 'Admin', the mapping method {@code
   * onAdminDto} gets executed with the {@link AdminDto} as argument.<br>
   * <br>
   * This method assumes this instance is either manually or automatically validated,
   * i.e. the JSON is valid against exactly one of the oneOf schemas. If it is either
   * valid against no schema or multiple schemas, it will throw an {@link
   * IllegalStateException}.
   */
  public <T> T foldOneOf(Function<AdminDto, T> onAdminDto, Function<UserDto, T> onUserDto) {
    return foldOneOf(
      onAdminDto,
      onUserDto,
      () -> {throw new IllegalStateException("Unable to fold the oneOf part of PersonDto: Not valid against one of the schemas [AdminDto, UserDto].");}
    );
  }

  private AdminDto asAdminDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (username != null) {
      props.put("username", username);
    }
    return new AdminDto(
      birthdate,
      props
    );
  }

  private UserDto asUserDto() {
    Map<String, Object> props = new HashMap<>(additionalProperties);
    if (requiredStringVal != null) {
      props.put("requiredStringVal", requiredStringVal);
    }
    if (birthdate != null) {
      props.put("birthdate", birthdate);
    }
    return new UserDto(
      username,
      props
    );
  }

  @Valid
  @JsonIgnore
  private List<Object> getInvalidCompositionDtos() {
    final List<Object> dtos = new ArrayList<>();
    if(getOneOfValidCount() != 1) {
      dtos.add(asAdminDto());
      dtos.add(asUserDto());
    }
    return dtos;
  }

  private boolean isValidAgainstAdminDto() {
    return asAdminDto().isValid();
  }

  private boolean isValidAgainstUserDto() {
    return asUserDto().isValid();
  }

  private int getOneOfValidCount() {
    return
      (isValidAgainstAdminDto() ? 1 : 0) +
      (isValidAgainstUserDto() ? 1 : 0);
  }

  @AssertFalse(message = "Is not valid against one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstNoOneOfSchema() {
    return getOneOfValidCount() == 0;
  }

  @AssertFalse(message = "Is valid against more than one of the schemas [Admin, User]")
  @JsonIgnore
  private boolean isValidAgainstMoreThanOneSchema() {
    return getOneOfValidCount() > 1;
  }

  @Valid
  @JsonIgnore
  private Object getOneOf() {
    if (getOneOfValidCount() != 1) {
      return null;
    }
    return foldOneOf(dto -> dto, dto -> dto, () -> null);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isRequiredStringValValid() {
      if(requiredStringVal != null) {
        return java.util.regex.Pattern.matches("Hello", requiredStringVal);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isRequiredStringValValid()
          && getOneOfValidCount() == 1
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final PersonDto other = (PersonDto) obj;
    return Objects.deepEquals(this.requiredStringVal, other.requiredStringVal)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.username, other.username)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      requiredStringVal,
      birthdate,
      username,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "PersonDto{" +
      "requiredStringVal=" + "'" + requiredStringVal + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "username=" + "'" + username + "'" + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String requiredStringVal;
    private LocalDate birthdate;
    private String username;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * RequiredStringVal
     */
    @JsonProperty("requiredStringVal")
    private Builder setRequiredStringVal(String requiredStringVal) {
      this.requiredStringVal = requiredStringVal;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    private Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Username
     */
    @JsonProperty("username")
    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    private Builder setAdminDto(AdminDto dto) {
      setBirthdate(dto.getBirthdate());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    private Builder setUserDto(UserDto dto) {
      setUsername(dto.getUsername());
      dto.getAdditionalProperties().forEach(this::addAdditionalProperty);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public PersonDto build() {
      return new PersonDto(requiredStringVal, birthdate, username, additionalProperties);
    }
  }

  public static FullOneOfBuilder fullBuilder() {
    return new FullOneOfBuilder(new Builder());
  }

  public static FullOneOfBuilder fullPersonDtoBuilder() {
    return new FullOneOfBuilder(new Builder());
  }

  public static final class FullOneOfBuilder {
    private final Builder builder;

    private FullOneOfBuilder(Builder builder) {
      this.builder = builder;
    }

    public FullPropertyBuilder0 setAdminDto(AdminDto dto) {
      return new FullPropertyBuilder0(builder.setAdminDto(dto));
    }

    public FullPropertyBuilder0 setUserDto(UserDto dto) {
      return new FullPropertyBuilder0(builder.setUserDto(dto));
    }

    public FullPropertyBuilder0 setOneOfContainer(PersonOneOfContainerDto container) {
      if (container.getAdminDto() != null) {
        builder.setAdminDto(container.getAdminDto());
      }

      if (container.getUserDto() != null) {
        builder.setUserDto(container.getUserDto());
      }
      return new FullPropertyBuilder0(builder);
    }
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public FullOptPropertyBuilder0 setRequiredStringVal(String requiredStringVal) {
      return new FullOptPropertyBuilder0(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static OneOfBuilder builder() {
    return new OneOfBuilder(new Builder());
  }

  public static OneOfBuilder personDtoBuilder() {
    return new OneOfBuilder(new Builder());
  }

  public static final class OneOfBuilder {
    private final Builder builder;

    private OneOfBuilder(Builder builder) {
      this.builder = builder;
    }

    public PropertyBuilder0 setAdminDto(AdminDto dto) {
      return new PropertyBuilder0(builder.setAdminDto(dto));
    }

    public PropertyBuilder0 setUserDto(UserDto dto) {
      return new PropertyBuilder0(builder.setUserDto(dto));
    }

    public PropertyBuilder0 setOneOfContainer(PersonOneOfContainerDto container) {
      if (container.getAdminDto() != null) {
        builder.setAdminDto(container.getAdminDto());
      }

      if (container.getUserDto() != null) {
        builder.setUserDto(container.getUserDto());
      }
      return new PropertyBuilder0(builder);
    }
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * RequiredStringVal
     */
    public PropertyBuilder1 setRequiredStringVal(String requiredStringVal) {
      return new PropertyBuilder1(builder.setRequiredStringVal(requiredStringVal));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public PersonDto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder0(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder0 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder0(builder.setAdditionalProperties(additionalProperties));
    }

    public PersonDto build(){
      return builder.build();
    }
  }
}
]


pojoWithEnumAndEnumDescription=[
package com.github.muehmar;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application
 */
public class UserDto {
  private final LanguageEnum language;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      LanguageEnum language,
      Map<String, Object> additionalProperties
    ) {
    this.language = language;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", "German language"),
    ENGLISH("ENGLISH", "English language");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    public String getValue() {
      return value;
    }

    public String getDescription() {
      return description;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  private LanguageEnum getLanguageRaw() {
    return language;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  public int getPropertyCount() {
    return
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(language, additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(language.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isLanguageValid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isLanguageValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      language,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "language=" + language + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static final class Builder {

    private LanguageEnum language;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(language, additionalProperties);
    }
  }

}
]


pojoWithEnumAndEnumDescriptionAndJacksonSupport=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * User of the Application
 */
@JsonDeserialize(builder = UserDto.Builder.class)
public class UserDto {
  private final LanguageEnum language;
  private final Map<String, Object> additionalProperties;

  public UserDto(
      LanguageEnum language,
      Map<String, Object> additionalProperties
    ) {
    this.language = language;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public enum LanguageEnum {
    GERMAN("GERMAN", "German language"),
    ENGLISH("ENGLISH", "English language");

    private final String value;
    private final String description;

    LanguageEnum(String value, String description) {
      this.value = value;
      this.description = description;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @JsonIgnore
    public String getDescription() {
      return description;
    }

    boolean isValid() {
      return true;
    }

    @Override
    public String toString() {
      return value;
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum e: LanguageEnum.values()) {
        if (e.value.equals(value)) {
          return e;
        }
      }
      final String possibleValues =
        Stream.of(values()).map(LanguageEnum::getValue).collect(Collectors.joining(", "));
      throw new IllegalArgumentException(
        "Unexpected value '"
          + value
          + "' for LanguageEnum, possible values are ["
          + possibleValues
          + "]");
    }
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  @JsonIgnore
  public Optional<LanguageEnum> getLanguage() {
    return Optional.ofNullable(language);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  @JsonIgnore
  public LanguageEnum getLanguageOr(LanguageEnum defaultValue) {
    return this.language == null ? defaultValue : this.language;
  }

  @JsonProperty("language")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LanguageEnum getLanguageRaw() {
    return language;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (language != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(LanguageEnum language) {
    return new UserDto(language, additionalProperties);
  }

  /**
   * Preferred language of this user<br>
   * * `GERMAN`: German language<br>
   * * `ENGLISH`: English language
   */
  public UserDto withLanguage(Optional<LanguageEnum> language) {
    return new UserDto(language.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isLanguageValid() {
      return true;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isLanguageValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final UserDto other = (UserDto) obj;
    return Objects.deepEquals(this.language, other.language)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      language,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "UserDto{" +
      "language=" + language + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private LanguageEnum language;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    @JsonProperty("language")
    public Builder setLanguage(LanguageEnum language) {
      this.language = language;
      return this;
    }

    /**
     * Preferred language of this user<br>
     * * `GERMAN`: German language<br>
     * * `ENGLISH`: English language
     */
    public Builder setLanguage(Optional<LanguageEnum> language) {
      this.language = language.orElse(null);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    public UserDto build() {
      return new UserDto(language, additionalProperties);
    }
  }

}
]


pojoWithRequiredAdditionalProperties=[
package com.github.muehmar;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.github.muehmar.openapi.util.EmailValidator;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;

@JsonDeserialize(builder = ObjectPojo1Dto.Builder.class)
public class ObjectPojo1Dto {
  private final String email;
  private final LocalDate birthdate;
  private final Map<String, Object> additionalProperties;

  public ObjectPojo1Dto(
      String email,
      LocalDate birthdate,
      Map<String, Object> additionalProperties
    ) {
    this.email = email;
    this.birthdate = birthdate;
    this.additionalProperties = Collections.unmodifiableMap(additionalProperties);
  }

  /**
   * email
   */
  @NotNull
  @Email
  public String getEmail() {
    return email;
  }

  /**
   * Birthdate
   */
  @JsonIgnore
  public Optional<LocalDate> getBirthdate() {
    return Optional.ofNullable(birthdate);
  }

  /**
   * Birthdate
   */
  @JsonIgnore
  public LocalDate getBirthdateOr(LocalDate defaultValue) {
    return this.birthdate == null ? defaultValue : this.birthdate;
  }

  @JsonProperty("birthdate")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private LocalDate getBirthdateRaw() {
    return birthdate;
  }

  @JsonIgnore
  public String getName() {
    try {
      return (String) additionalProperties.get("name");
    }
    catch (ClassCastException e) {
      return null;
    }
  }

  @NotNull
  private Object getNameAsObject() {
    return additionalProperties.get("name");
  }

  @AssertTrue(message = "Value is not an instance of String")
  private boolean isNameCorrectType() {
    Object value = additionalProperties.get("name");
    return value == null || value instanceof String;
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Returns the additional property with {@code key} wrapped in an {@link Optional}
   * if present, {@link Optional#empty()} otherwise
   */
  public Optional<Object> getAdditionalProperty(String key) {
    return Optional.ofNullable(additionalProperties.get(key));
  }

  /**
   * Returns the number of present properties of this object.
   */
  @JsonIgnore
  public int getPropertyCount() {
    return
      (email != null ? 1 : 0) +
      (birthdate != null ? 1 : 0) +
      additionalProperties.size();
  }

  /**
   * email
   */
  public ObjectPojo1Dto withEmail(String email) {
    return new ObjectPojo1Dto(email, birthdate, additionalProperties);
  }

  /**
   * Birthdate
   */
  public ObjectPojo1Dto withBirthdate(LocalDate birthdate) {
    return new ObjectPojo1Dto(email, birthdate, additionalProperties);
  }

  /**
   * Birthdate
   */
  public ObjectPojo1Dto withBirthdate(Optional<LocalDate> birthdate) {
    return new ObjectPojo1Dto(email, birthdate.orElse(null), additionalProperties);
  }

  boolean isValid() {
    return new Validator().isValid();
  }

  private class Validator {
    private boolean isEmailValid() {
      if(email != null) {
        return EmailValidator.isValid(email);
      }

      return false;
    }

    private boolean isBirthdateValid() {
      return true;
    }

    private boolean isNameValid() {
      return getName() != null;
    }

    private boolean isAdditionalPropertiesValid() {
      if(getAdditionalProperties() != null) {
        return getAdditionalProperties().values().stream().allMatch(this::isAdditionalPropertiesValueValid);
      }

      return false;
    }

    private boolean isAdditionalPropertiesValueValid(Object additionalPropertiesValue) {
      return true;
    }

    private boolean isValid() {
      return isEmailValid()
          && isBirthdateValid()
          && isNameValid()
          && isAdditionalPropertiesValid();
    }
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final ObjectPojo1Dto other = (ObjectPojo1Dto) obj;
    return Objects.deepEquals(this.email, other.email)
        && Objects.deepEquals(this.birthdate, other.birthdate)
        && Objects.deepEquals(this.additionalProperties, other.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      email,
      birthdate,
      additionalProperties
    );
  }

  @Override
  public String toString() {
    return "ObjectPojo1Dto{" +
      "email=" + "'" + email + "'" + ", " +
      "birthdate=" + birthdate + ", " +
      "additionalProperties=" + additionalProperties +
      "}";
  }

  @JsonPOJOBuilder(withPrefix = "set")
  public static final class Builder {

    private Builder() {
    }

    private String email;
    private LocalDate birthdate;
    private Map<String, Object> additionalProperties = new HashMap<>();

    /**
     * email
     */
    @JsonProperty("email")
    private Builder setEmail(String email) {
      this.email = email;
      return this;
    }

    /**
     * Birthdate
     */
    @JsonProperty("birthdate")
    public Builder setBirthdate(LocalDate birthdate) {
      this.birthdate = birthdate;
      return this;
    }

    /**
     * Birthdate
     */
    public Builder setBirthdate(Optional<LocalDate> birthdate) {
      this.birthdate = birthdate.orElse(null);
      return this;
    }

    @JsonAnySetter
    public Builder addAdditionalProperty(String key, Object value) {
      this.additionalProperties.put(key, value);
      return this;
    }

    public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
      this.additionalProperties = new HashMap<>(additionalProperties);
      return this;
    }

    private Builder setName(String name) {
      return addAdditionalProperty("name", name);
    }

    public ObjectPojo1Dto build() {
      return new ObjectPojo1Dto(email, birthdate, additionalProperties);
    }
  }

  public static FullPropertyBuilder0 fullBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static FullPropertyBuilder0 fullObjectPojo1DtoBuilder() {
    return new FullPropertyBuilder0(new Builder());
  }

  public static final class FullPropertyBuilder0 {
    private final Builder builder;

    private FullPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * email
     */
    public FullPropertyBuilder1 setEmail(String email) {
      return new FullPropertyBuilder1(builder.setEmail(email));
    }

  }

  public static final class FullPropertyBuilder1 {
    private final Builder builder;

    private FullPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Additional Property 'name'
     */
    public FullOptPropertyBuilder0 setName(String name) {
      return new FullOptPropertyBuilder0(builder.setName(name));
    }

  }

  public static final class FullOptPropertyBuilder0 {
    private final Builder builder;

    private FullOptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Birthdate
     */
    public FullOptPropertyBuilder1 setBirthdate(LocalDate birthdate) {
      return new FullOptPropertyBuilder1(builder.setBirthdate(birthdate));
    }

    /**
     * Birthdate
     */
    public FullOptPropertyBuilder1 setBirthdate(Optional<LocalDate> birthdate) {
      return new FullOptPropertyBuilder1(builder.setBirthdate(birthdate));
    }

  }

  public static final class FullOptPropertyBuilder1 {
    private final Builder builder;

    private FullOptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public FullOptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
      return new FullOptPropertyBuilder1(builder.addAdditionalProperty(key, value));
    }

    public FullOptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new FullOptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static PropertyBuilder0 builder() {
    return new PropertyBuilder0(new Builder());
  }

  public static PropertyBuilder0 objectPojo1DtoBuilder() {
    return new PropertyBuilder0(new Builder());
  }

  public static final class PropertyBuilder0 {
    private final Builder builder;

    private PropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * email
     */
    public PropertyBuilder1 setEmail(String email) {
      return new PropertyBuilder1(builder.setEmail(email));
    }

  }

  public static final class PropertyBuilder1 {
    private final Builder builder;

    private PropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    /**
     * Additional Property 'name'
     */
    public PropertyBuilder2 setName(String name) {
      return new PropertyBuilder2(builder.setName(name));
    }

  }

  public static final class PropertyBuilder2 {
    private final Builder builder;

    private PropertyBuilder2(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder0 andAllOptionals(){
      return new OptPropertyBuilder0(builder);
    }

    public Builder andOptionals(){
      return builder;
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }

  public static final class OptPropertyBuilder0 {
    private final Builder builder;

    private OptPropertyBuilder0(Builder builder) {
      this.builder = builder;
    }

    /**
     * Birthdate
     */
    public OptPropertyBuilder1 setBirthdate(LocalDate birthdate) {
      return new OptPropertyBuilder1(builder.setBirthdate(birthdate));
    }

    /**
     * Birthdate
     */
    public OptPropertyBuilder1 setBirthdate(Optional<LocalDate> birthdate) {
      return new OptPropertyBuilder1(builder.setBirthdate(birthdate));
    }

  }

  public static final class OptPropertyBuilder1 {
    private final Builder builder;

    private OptPropertyBuilder1(Builder builder) {
      this.builder = builder;
    }

    public OptPropertyBuilder1 addAdditionalProperty(String key, Object value) {
      return new OptPropertyBuilder1(builder.addAdditionalProperty(key, value));
    }

    public OptPropertyBuilder1 setAdditionalProperties(Map<String, Object> additionalProperties) {
      return new OptPropertyBuilder1(builder.setAdditionalProperties(additionalProperties));
    }

    public ObjectPojo1Dto build(){
      return builder.build();
    }
  }
}
]