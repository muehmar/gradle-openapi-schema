nullableStringItem[API_TYPE]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isListValNull)
  );
}

@JsonProperty("listVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getListValJackson() {
  return isListValNull ? new JacksonNullContainer<>(listVal) : listVal;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[API_TYPE_FRAMEWORK]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isListValNull)
  );
}

@JsonProperty("listVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getListValJackson() {
  return isListValNull ? new JacksonNullContainer<>(listVal) : listVal;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[STANDARD]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isListValNull)
  );
}

@JsonProperty("listVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getListValJackson() {
  return isListValNull ? new JacksonNullContainer<>(listVal) : listVal;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]


nullableStringItem[STANDARD_NO_VALIDATION]=[
com.fasterxml.jackson.annotation.JsonIgnore
com.fasterxml.jackson.annotation.JsonInclude
com.fasterxml.jackson.annotation.JsonProperty
com.github.muehmar.openapi.util.JacksonNullContainer
com.github.muehmar.openapi.util.Tristate
java.util.List
java.util.Optional
java.util.function.Function
javax.validation.constraints.Pattern
javax.validation.constraints.Size

@JsonIgnore
public Tristate<List<Optional<String>>> getListVal() {
  return mapList(
      listVal,
      Function.identity(),
      Optional::ofNullable,
      Function.identity(),
      l -> Tristate.ofNullableAndNullFlag(l, isListValNull)
  );
}

@JsonProperty("listVal")
@JsonInclude(JsonInclude.Include.NON_NULL)
private Object getListValJackson() {
  return isListValNull ? new JacksonNullContainer<>(listVal) : listVal;
}

@Size(min = 5, max = 10)
@JsonIgnore
private List<@Pattern(regexp="pattern") String> getListValRaw() {
  return listVal;
}

]