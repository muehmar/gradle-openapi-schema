allNecessityAndNullabilityVariantsPojo=[
com.fasterxml.jackson.annotation.JsonAnySetter
com.github.muehmar.openapi.util.Tristate
java.util.HashMap
java.util.Map

@JsonAnySetter
public Builder addAdditionalProperty(String key, Object value) {
  this.additionalProperties.put(key, value);
  return this;
}

public Builder addAdditionalProperty(String key, Tristate<Object> value) {
  value
      .onValue(val -> this.additionalProperties.put(key, val))
      .onNull(() -> this.additionalProperties.put(key, null))
      .onAbsent(() -> null);
  return this;
}

public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
  this.additionalProperties = new HashMap<>(additionalProperties);
  return this;
}
]


nullableStringTypeWithMappingAdditionalProperties=[
com.custom.CustomString
com.fasterxml.jackson.annotation.JsonAnySetter
com.github.muehmar.openapi.util.Tristate
java.util.HashMap
java.util.Map

@JsonAnySetter
public Builder addAdditionalProperty(String key, CustomString value) {
  this.additionalProperties.put(key, value != null ? CustomString.toString(value) : null);
  return this;
}

public Builder addAdditionalProperty(String key, Tristate<CustomString> value) {
  value
      .onValue(val -> this.additionalProperties.put(key, CustomString.toString(val)))
      .onNull(() -> this.additionalProperties.put(key, null))
      .onAbsent(() -> null);
  return this;
}

public Builder setAdditionalProperties(Map<String, CustomString> additionalProperties) {
  this.additionalProperties = new HashMap<>();
  additionalProperties.forEach((key, val) -> this.additionalProperties.put(key, val != null ? CustomString.toString(val) : null));
  return this;
}
]


objectPojoAnyTypeAdditionalProperties=[
com.fasterxml.jackson.annotation.JsonAnySetter
com.github.muehmar.openapi.util.Tristate
java.util.HashMap
java.util.Map

@JsonAnySetter
public Builder addAdditionalProperty(String key, Object value) {
  this.additionalProperties.put(key, value);
  return this;
}

public Builder addAdditionalProperty(String key, Tristate<Object> value) {
  value
      .onValue(val -> this.additionalProperties.put(key, val))
      .onNull(() -> this.additionalProperties.put(key, null))
      .onAbsent(() -> null);
  return this;
}

public Builder setAdditionalProperties(Map<String, Object> additionalProperties) {
  this.additionalProperties = new HashMap<>(additionalProperties);
  return this;
}
]


objectPojoSpecificTypeAdditionalProperties=[
com.fasterxml.jackson.annotation.JsonAnySetter
java.util.HashMap
java.util.Map
java.util.Optional

@JsonAnySetter
public Builder addAdditionalProperty(String key, UserDto value) {
  this.additionalProperties.put(key, value);
  return this;
}

public Builder addAdditionalProperty(String key, Optional<UserDto> value) {
  value.ifPresent(val -> this.additionalProperties.put(key, val));
  return this;
}

public Builder setAdditionalProperties(Map<String, UserDto> additionalProperties) {
  this.additionalProperties = new HashMap<>(additionalProperties);
  return this;
}
]


stringTypeWithMappingAdditionalProperties=[
com.custom.CustomString
com.fasterxml.jackson.annotation.JsonAnySetter
java.util.HashMap
java.util.Map
java.util.Optional

@JsonAnySetter
public Builder addAdditionalProperty(String key, CustomString value) {
  this.additionalProperties.put(key, value != null ? CustomString.toString(value) : null);
  return this;
}

public Builder addAdditionalProperty(String key, Optional<CustomString> value) {
  value.ifPresent(val -> this.additionalProperties.put(key, CustomString.toString(val)));
  return this;
}

public Builder setAdditionalProperties(Map<String, CustomString> additionalProperties) {
  this.additionalProperties = new HashMap<>();
  additionalProperties.forEach((key, val) -> this.additionalProperties.put(key, val != null ? CustomString.toString(val) : null));
  return this;
}
]