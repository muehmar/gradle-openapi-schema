allOfPojo=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal(dto.getStringVal());
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setNecessityAndNullabilityDto(NecessityAndNullabilityDto dto) {
  setRequiredStringVal(dto.getRequiredStringVal());
  setRequiredNullableStringVal(dto.getRequiredNullableStringVal());
  setOptionalStringVal(dto.getOptionalStringVal());
  setOptionalNullableStringVal(dto.getOptionalNullableStringVal());
  setRequiredListWithNullableItems_(dto.getRequiredListWithNullableItems());
  setRequiredNullableListWithNullableItems_(dto.getRequiredNullableListWithNullableItems());
  setOptionalListWithNullableItems_(dto.getOptionalListWithNullableItems());
  setOptionalNullableListWithNullableItems_(dto.getOptionalNullableListWithNullableItems());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


anyOfPojo=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal(dto.getStringVal());
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setNecessityAndNullabilityDto(NecessityAndNullabilityDto dto) {
  setRequiredStringVal(dto.getRequiredStringVal());
  setRequiredNullableStringVal(dto.getRequiredNullableStringVal());
  setOptionalStringVal(dto.getOptionalStringVal());
  setOptionalNullableStringVal(dto.getOptionalNullableStringVal());
  setRequiredListWithNullableItems_(dto.getRequiredListWithNullableItems());
  setRequiredNullableListWithNullableItems_(dto.getRequiredNullableListWithNullableItems());
  setOptionalListWithNullableItems_(dto.getOptionalListWithNullableItems());
  setOptionalNullableListWithNullableItems_(dto.getOptionalNullableListWithNullableItems());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


anyOfPojoWithDiscriminator=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal("SampleObjectPojo1");
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setSampleObjectPojo2Dto(SampleObjectPojo2Dto dto) {
  setStringVal("SampleObjectPojo2");
  setBirthdate(dto.getBirthdate());
  setEmail(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


composedPojoHasNoAdditionalPropertiesAllowed=[
.
.
private Builder sampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  stringVal(dto.getStringVal());
  intVal(dto.getIntVal());
  doubleVal(dto.getDoubleVal());
  return this;
}

private Builder sampleObjectPojo2Dto(SampleObjectPojo2Dto dto) {
  stringVal(dto.getStringVal());
  birthdate(dto.getBirthdate());
  email(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


composedPojoHasNotNullableAdditionalProperties=[
.
.
private Builder sampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  stringVal(dto.getStringVal());
  intVal(dto.getIntVal());
  doubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue()));
  return this;
}

private Builder sampleObjectPojo2Dto(SampleObjectPojo2Dto dto) {
  stringVal(dto.getStringVal());
  birthdate(dto.getBirthdate());
  email(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


nestedOneOfPojo=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal(dto.getStringVal());
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setOneOfPojo1Dto(OneOfPojo1Dto dto) {
  setRequiredStringVal(dto.getRequiredStringVal());
  if (dto.getIsRequiredNullableStringValPresent()) setRequiredNullableStringVal(dto.getRequiredNullableStringVal());
  if (dto.getIsOptionalStringValNotNull()) setOptionalStringVal(dto.getOptionalStringVal());
  setOptionalNullableStringVal(dto.getOptionalNullableStringVal());
  setRequiredListWithNullableItems_(dto.getRequiredListWithNullableItems());
  if (dto.getIsRequiredNullableListWithNullableItemsPresent()) setRequiredNullableListWithNullableItems_(dto.getRequiredNullableListWithNullableItems());
  if (dto.getIsOptionalListWithNullableItemsNotNull()) setOptionalListWithNullableItems_(dto.getOptionalListWithNullableItems());
  setOptionalNullableListWithNullableItems_(dto.getOptionalNullableListWithNullableItems());
  setStringVal(dto.getStringVal());
  setBirthdate(dto.getBirthdate());
  setEmail(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


noBuilderSetMethodPrefix=[
.
.
private Builder sampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  stringVal(dto.getStringVal());
  intVal(dto.getIntVal());
  doubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder sampleObjectPojo2Dto(SampleObjectPojo2Dto dto) {
  stringVal(dto.getStringVal());
  birthdate(dto.getBirthdate());
  email(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


oneOfPojo=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal(dto.getStringVal());
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setNecessityAndNullabilityDto(NecessityAndNullabilityDto dto) {
  setRequiredStringVal(dto.getRequiredStringVal());
  setRequiredNullableStringVal(dto.getRequiredNullableStringValOpt1());
  setOptionalStringVal(dto.getOptionalStringValOpt2());
  setOptionalNullableStringVal(dto.getOptionalNullableStringValTristate());
  setRequiredListWithNullableItems_(dto.getRequiredListWithNullableItems());
  setRequiredNullableListWithNullableItems_(dto.getRequiredNullableListWithNullableItemsOpt1());
  setOptionalListWithNullableItems_(dto.getOptionalListWithNullableItemsOpt2());
  setOptionalNullableListWithNullableItems_(dto.getOptionalNullableListWithNullableItemsTristate());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


oneOfPojoWithDiscriminator=[
.
.
private Builder setSampleObjectPojo1Dto(SampleObjectPojo1Dto dto) {
  setStringVal("SampleObjectPojo1");
  setIntVal(dto.getIntVal());
  setDoubleVal(dto.getDoubleVal());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setSampleObjectPojo2Dto(SampleObjectPojo2Dto dto) {
  setStringVal("SampleObjectPojo2");
  setBirthdate(dto.getBirthdate());
  setEmail(dto.getEmail());
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]


oneOfPojoWithEnumDiscriminator=[
.
.
private Builder setYellowDto(YellowDto dto) {
  setStringVal(dto.getStringVal());
  setColor(BaseDto.Color.YELLOW);
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}

private Builder setOrangeDto(OrangeDto dto) {
  setBirthdate(dto.getBirthdate());
  setColor(BaseDto.Color.ORANGE);
  dto.getAdditionalProperties()
      .forEach(prop -> addAdditionalProperty(prop.getName(), prop.getValue().orElse(null)));
  return this;
}
]